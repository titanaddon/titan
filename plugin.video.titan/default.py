exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MmIgMjk7MmMgMjkuMmEoJ2MvMS8xYS8yMC8xOS8xYS84LzI3LzExL2YvZS8xYS8xMy8xYS8xYi9hLzFkLzFhLzFjLzIzLzFhL2IvMWEvMTMvMWEvMWIvMi8xYS85LzFhLzIyLzIzLzFhLzYrMjUrMjErMjQrMTgrMjgrMTIrMTUrMTQvMWEvMTcvNytkKzFlKzFmKzEwLzFhLzUvMTYrMy80LzI2LzAnKQ==")))(lambda a,b:b[int("0x"+a.group(1),16)],"IiArIHRvX3N0cmluZyArICIpIiwgdGV4dCkuZ3JvdXAoMSkKICAgICAgIGV4Y2VwdDogciA9ICcnCiAgICByZXR1cm4gciAgICAgICAgCmRlZiBvcGVuX3VybCh1cmwpOgogICAgICAgICMgdXJsPXVybC5yZXBsYWNlKCcgJywnJTIwJykKICAgICAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QodXJsKQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tR0I7IHJ2OjEuOS4wLjMpIEdlY2tvLzIwMDgwOTI0MTcgRmlyZWZveC8zLjAuMycpCiAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQogICAgICAgIGxpbms9cmVzcG9uc2UucmVhZCgpCiAgICAgICAgcmVzcG9uc2UuY2xvc2UoKQogICAgICAgIHJldHVybiBsaW5rCgpkZWYgc2V0Vmlldyhjb250ZW50LCB2aWV3VHlwZSk6CiAgICBpZiBjb250ZW50OgogICAgICAgIHhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCBjb250ZW50KQogICAgaWYgc2VsZkFkZG9uLmdldFNldHRpbmcoJ2F1dG8tdmlldycpPT0ndHJ1ZSc6CiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIgJSBzZWxmQWRkb24uZ2V0U2V0dGluZyh2aWV3VHlwZSkgKQoKcGFyYW1zPWdldF9wYXJhbXMoKTsgdXJsPU5vbmU7IG5hbWU9Tm9uZTsgbW9kZT1Ob25lOyBzaXRlPU5vbmU7IGljb25pbWFnZT1Ob25lCnRyeTogc2l0ZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sic2l0ZSJdKQpleGNlcHQ6IHBhc3MKdHJ5OiB1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKQpleGNlcHQ6IHBhc3MKdHJ5OiBuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pCmV4Y2VwdDogcGFzcwp0cnk6IG1vZGU9aW50KHBhcmFtc1sibW9kZSJdKQpleGNlcHQ6IHBhc3MKdHJ5OiBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQpleGNlcHQ6IHBhc3MKcHJpbnQgIlNpdGU6ICIrc3RyKHNpdGUpOyBwcmludCAiTW9kZTogIitzdHIobW9kZSk7IHByaW50ICJVUkw6ICIrc3RyKHVybCk7IHByaW50ICJOYW1lOiAiK3N0cihuYW1lKQpwcmludCBwYXJhbXMKZGVmIENoZWNrX2hhdGVycygpOgoJCXNhZmVfdG9fZ28gPSAwCgkJbmFtZSA9ICJwbHVnaW4udmlkZW8udGl0YW4iCgkJaW1wb3J0IHNodXRpbAoJCWZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUsdG9wZG93bj1UcnVlKToKCQkJCWlmICJzcGFydGFuIiBpbiBzdHIoZGlycyk6CgkJCQkJZGlhbG9nLm9rKCdbQ09MT1IgbGltZV1bQl1UaXRhblsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV0gQXV0b2RldGVjdFsvQ09MT1JdICcsJ1RpdGFuIGFkZG9uIGRvZXNudCBzdXBwb3J0IHNjYW1tZXJzIGFuZCBkaXNob25lc3QgcmV2aWV3ZXJzLi4uIElmIHlvdSBoYXZlIGluc3RhbGxlZCBhbnl0aGluZyByZWxhdGVkIHRvIHNwYXJ0YW5waXhlbCB0aGlzIGFkZG9uIHdpbGwgbm90IHdvcmsgZm9yIHlvdSwgYW5kIHlvdSBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGJ1aWxkLCBwbGVudHkgb2YgZnJlZSBidWlsZCBvdXQgdGhlcmUnLCcnLCcnKQoJCQkJCWZvciBkaXIgaW4gZGlyczoKCQkJCQkJc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKCQkJCWlmICJ0ZWNodGltZXJ1dSIgaW4gc3RyKGRpcnMpOgoJCQkJCWRpYWxvZy5vaygnW0NPTE9SIGxpbWVdW0JdVGl0YW5bL0JdWy9DT0xPUl1bQ09MT1Igd2hpdGVdIEF1dG9kZXRlY3RbL0NPTE9SXSAnLCdUaXRhbiBhZGRvbiBkb2VzbnQgc3VwcG9ydCBzY2FtbWVycyBhbmQgZGlzaG9uZXN0IHJldmlld2Vycy4uLiBJZiB5b3UgaGF2ZSBpbnN0YWxsZWQgYW55dGhpbmcgcmVsYXRlZCB0byBzcGFydGFucGl4ZWwgdGhpcyBhZGRvbiB3aWxsIG5vdCB3b3JrIGZvciB5b3UsIGFuZCB5b3Ugc2hvdWxkIHVzZSBhIGRpZmZlcmVudCBidWlsZCwgcGxlbnR5IG9mIGZyZWUgYnVpbGQgb3V0IHRoZXJlJywnJywnJykKCQkJCQlmb3IgZGlyIGluIGRpcnM6CgkJCQkJCXNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCgkJCQlpZiAidGVjaHRpbWVydSIgaW4gc3RyKGRpcnMpOgoJCQkJCWRpYWxvZy5vaygnW0NPTE9SIGxpbWVdW0JdVGl0YW5bL0JdWy9DT0xPUl1bQ09MT1Igd2hpdGVdIEF1dG9kZXRlY3RbL0NPTE9SXSAnLCdUaXRhbiBhZGRvbiBkb2VzbnQgc3VwcG9ydCBzY2FtbWVycyBhbmQgZGlzaG9uZXN0IHJldmlld2Vycy4uLiBJZiB5b3UgaGF2ZSBpbnN0YWxsZWQgYW55dGhpbmcgcmVsYXRlZCB0byBzcGFydGFucGl4ZWwgdGhpcyBhZGRvbiB3aWxsIG5vdCB3b3JrIGZvciB5b3UsIGFuZCB5b3Ugc2hvdWxkIHVzZSBhIGRpZmZlcmVudCBidWlsZCwgcGxlbnR5IG9mIGZyZWUgYnVpbGQgb3V0IHRoZXJlJywnJywnJykKCQkJCQlmb3IgZGlyIGluIGRpcnM6CgkJCQkJCXNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCgkJCQlpZiAidGVjaHRpbWVydXV1IiBpbiBzdHIoZGlycyk6CgkJCQkJZGlhbG9nLm9rKCdbQ09MT1IgbGltZV1bQl1UaXRhblsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV0gQXV0b2RldGVjdFsvQ09MT1JdICcsJ1RpdGFuIGFkZG9uIGRvZXNudCBzdXBwb3J0IHNjYW1tZXJzIGFuZCBkaXNob25lc3QgcmV2aWV3ZXJzLi4uIElmIHlvdSBoYXZlIGluc3RhbGxlZCBhbnl0aGluZyByZWxhdGVkIHRvIHNwYXJ0YW5waXhlbCB0aGlzIGFkZG9uIHdpbGwgbm90IHdvcmsgZm9yIHlvdSwgYW5kIHlvdSBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGJ1aWxkLCBwbGVudHkgb2YgZnJlZSBidWlsZCBvdXQgdGhlcmUnLCcnLCcnKQoJCQkJCWZvciBkaXIgaW4gZGlyczoKCQkJCQkJc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkJCQkJCQoJCQkJaWYgInNwYXJ0YW5waXhlbCIgaW4gc3RyKGRpcnMpOgoJCQkJCWRpYWxvZy5vaygnW0NPTE9SIGxpbWVdW0JdVGl0YW5bL0JdWy9DT0xPUl1bQ09MT1Igd2hpdGVdIEF1dG9kZXRlY3RbL0NPTE9SXSAnLCdUaXRhbiBhZGRvbiBkb2VzbnQgc3VwcG9ydCBzY2FtbWVycyBhbmQgZGlzaG9uZXN0IHJldmlld2Vycy4uLiBJZiB5b3UgaGF2ZSBpbnN0YWxsZWQgYW55dGhpbmcgcmVsYXRlZCB0byBzcGFydGFucGl4ZWwgdGhpcyBhZGRvbiB3aWxsIG5vdCB3b3JrIGZvciB5b3UsIGFuZCB5b3Ugc2hvdWxkIHVzZSBhIGRpZmZlcmVudCBidWlsZCwgcGxlbnR5IG9mIGZyZWUgYnVpbGQgb3V0IHRoZXJlJywnJywnJykKCQkJCQlmb3IgZGlyIGluIGRpcnM6CgkJCQkJCXNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCQkKCmlmIG1vZGU9PU5vbmUgb3IgdXJsPT1Ob25lIG9yIGxlbih1cmwpPDE6IENBVEVHT1JJRVMoKQplbGlmIG1vZGU9PTM6IEdFVFNIT1dTKHVybCxuYW1lKQplbGlmIG1vZGU9PTQ6IEdFVExJVkUodXJsLG5hbWUpCmVsaWYgbW9kZT09NTogR0VURVBJU09ERVModXJsLG5hbWUpCmVsaWYgbW9kZT09NjogR0VUTU0odXJsLG5hbWUpCgplbGlmIG1vZGU9PTg6IFNFQVJDSCh1cmwsbmFtZSkKZWxpZiBtb2RlPT05OiBHRVRfU0VBUkNIX0ZPTERFUlModXJsLG5hbWUpCmVsaWYgbW9kZT09MTA6IEhJRkkobmFtZSx1cmwpCgplbGlmIG1vZGU9PTEwMTogUExBWU1PVklFKG5hbWUsdXJsKQplbGlmIG1vZGU9PTEwMjogR0VUUkFORE9NKHVybCxuYW1lKQplbGlmIG1vZGU9PTIxOiBHRVRGRUFUVVJFRCh1cmwsbmFtZSkKZWxpZiBtb2RlPT0zMDogR0VUSkxJU1QodXJsLG5hbWUpCmVsaWYgbW9kZT09MzE6IEdldFN1YmxpbmtzKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQpCmVsaWYgbW9kZSA9PSA5OTk6IGNhcnRvb25zLkNhcnRvb25EaXJlY3RvcnkoKQplbGlmIG1vZGUgPT0gOTk4OiAKCWZyb20gcmVzb3VyY2VzLmxpYi5saWJyYXJpZXMgaW1wb3J0IHRpdGFubGl2ZQoJdGl0YW5saXZlLnJhbmRvbXR2KHVybCkKeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQoK|aT1BejdLeHlTRCJdCnRyeTogYWN0aW9uID0gZGljdCh1cmxwYXJzZS5wYXJzZV9xc2woc3lzLmFyZ3ZbMl0ucmVwbGFjZSgnPycsJycpKSlbJ2FjdGlvbiddCmV4Y2VwdDogYWN0aW9uID0gTm9uZQphZGRvbl9pZCA9ICdwbHVnaW4udmlkZW8udGl0YW4nCnNlbGZBZGRvbiA9IHhibWNhZGRvbi5BZGRvbihpZD1hZGRvbl9pZCkKYWRkb24gPSBBZGRvbihhZGRvbl9pZCwgc3lzLmFyZ3YpCmZhbmFydCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgLCAnZmFuYXJ0LmpwZycpKQpyYW5kb21pY28gPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L3JhbmRvbS5wbmcnKSkKaWNvbiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29uLnBuZycpKQppY29uMiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvbW0ucG5nJykpCmljb24zID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9oaWZpLnBuZycpKQppY29uNCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvZmVhdHVyZWQucG5nJykpCmljb241ID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9qaWNvbi5wbmcnKSkKaWNvbjYgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2cxMGljb24ucG5nJykpCmljb25fYW5pbWUgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2FuaW1lLnBuZycpKQpmYW5hcnRoaWZpID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9oaWZpYmcuanBnJykpCmZhbmFydG1tID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9tbWJnLmpwZycpKQpmYW5hcnRmZWF0dXJlID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9mZWF0dXJlZGJnLmpwZycpKQpmYW5hcnRqID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9qZmFuYXJ0LmpwZycpKQpmYW5hcnRnMTAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2ljZWZhbmFydC5qcGVnJykpCmFuaW1lZmFuID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9hbmltZWZhbi5qcGcnKSkKc2VhcmNoaWNvbiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvc2VhcmNoLnBuZycpKQppY2VpY29uID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9pY2UucG5nJykpCm1ldGFzZXQgPSBzZWxmQWRkb24uZ2V0U2V0dGluZygnZW5hYmxlX21ldGEnKQphZGRvbiA9IEFkZG9uKGFkZG9uX2lkLCBzeXMuYXJndikKbGl2ZXR2ID0gWycubTN1OCcsJy50cz0nLCdydG1wOi8vJywnaXB0dm5hdGlvbiddCkhPTUUgICAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9ob21lLycpCkVYQ0xVREVfSEFURVIgICA9IFsnc3BhcnRhbicsJ3RlY2h0aW1lcnV1JywgJ3NwYXJ0YW5waXhlbCcgLCAnYmVhc3QnLCAncm95YWxpc3QnLCdTcGFydGFucGl4ZWwnLCdTcGFydGFuJ10KZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQpkZWYgQ0FURUdPUklFUygpOgoJQ2hlY2tfaGF0ZXJzKCkJCglhZGREaXIyKCdGZWF0dXJlZCBNb3ZpZXMnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL0hkTW92aWVzLnhtbCcsMjEsaWNvbjQsZmFuYXJ0ZmVhdHVyZSkKCWFkZERpcjIoJ0hpRmkgTGlzdHMnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL21haW5fcGFnZS54bWwnLDEwLGljb24zLGZhbmFydGhpZmkpCglhZGREaXIyKCdNJk1zIEF3ZXNvbWUgVHYgU3R1ZmYnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL05hdmlYUGxheWxpc3QvcGxheWxpc3RfbWFyaS54bWwnLDYsaWNvbjIsZmFuYXJ0bW0pCglhZGREaXIyKCdNaWRuaWdodCBTb2NpZXR5JywnaHR0cDovL3Bhc3RlYmluLmNvbS9yYXcvcVY5a0c2RmsnLDMwLGljb241LGZhbmFydGopCgoJYWRkRGlyMignQW5pbWUgWm9uZScsJ2h0dHBzOi8vYXJjaGl2ZS5vcmcvZG93bmxvYWQvJyw5OTksaWNvbl9hbmltZSxhbmltZWZhbikKCWFkZERpcjIoJ1JhbmRvbSAzIFBpY2tzJywnaHR0cDovLycsMTAyLHJhbmRvbWljbyxmYW5hcnQpCglhZGREaXIyKCdTZWFyY2gnLCdodHRwOi8vdGl0YW4nLDgsc2VhcmNoaWNvbixmYW5hcnQpCgl4Ym1jLmV4ZWN1dGVidWlsdGluKCJDb250YWluZXIuU2V0Vmlld01vZGUoNTAwKSIpCgpkZWYgSElGSShuYW1lLHVybCk6CiAgICAgICAgQ2hlY2tfaGF0ZXJzKCkKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXInKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaF9yYW5kb206CgkJCWFkZERpcjIobmFtZSx1cmwsOTk4LHRodW1iLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2g6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsNix0aHVtYixmYW5hcnRtbSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLGZhbmFydG1tKQkKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaDQ6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsNix0aHVtYixmYW5hcnRtbSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLGZhbmFydG1tKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsNixpY29uMixmYW5hcnRtbSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24yLGZhbmFydG1tKQkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsNixpY29uMixmYW5hcnRtbSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24yLGZhbmFydG1tKQpkZWYgUExBWU1PVklFKG5hbWUsdXJsKToKCWlmIi5tM3U4IiBpbiB1cmw6CgkJYWRkb24ucmVzb2x2ZV91cmwodXJsKQoJZWxpZiAiaXB0dm5hdGlvbiIgaW4gdXJsOgoJCSMgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCgkJIyBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQoJCWFkZG9uLnJlc29sdmVfdXJsKHVybCkKCWVsaWYgIi50cz0iIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCgllbGlmICJydG1wOi8vIiBpbiB1cmw6CgkJYWRkb24ucmVzb2x2ZV91cmwodXJsKQkJCgllbGlmICJwb21wYTEubm9zdmlkZW8iIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCQoJZWxzZToKCQl0cnk6CgkJCXJlc29sdmVkPXVybHJlc29sdmVyLnJlc29sdmUodXJsKQoJCQlhZGRvbi5yZXNvbHZlX3VybChyZXNvbHZlZCkKCQlleGNlcHQ6IAoJCQl0cnk6CgkJCQlzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybCkucmVzb2x2ZSgpCgkJCQlsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0nRGVmYXVsdFZpZGVvLnBuZycsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKCQkJCXhibWMuUGxheWVyICgpLnBsYXkoc3RyZWFtX3VybCxsaXosRmFsc2UpCgkJCWV4Y2VwdDoKCQkJCXRyeToKCQkJCQlmcm9tIHJlc291cmNlcy5saWIgaW1wb3J0IHJlc29sdmVycwoJCQkJCXVybCA9IHJlc29sdmVycy5yZXF1ZXN0KHVybCkKCQkJCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCgkJCQlleGNlcHQ6IHBhc3MJCQoJCWFkZExpbmsoJ1ByZXNzIGJhY2sgdG8gZXhpdCcsJycsMSxpY29uLGZhbmFydCkKICAgIApkZWYgY2xlYW5IZXgodGV4dCk6CiAgICBkZWYgZml4dXAobSk6CiAgICAgICAgdGV4dCA9IG0uZ3JvdXAoMCkKICAgICAgICBpZiB0ZXh0WzozXSA9PSAiJiN4IjogcmV0dXJuIHVuaWNocihpbnQodGV4dFszOi0xXSwgMTYpKS5lbmNvZGUoJ3V0Zi04JykKICAgICAgICBlbHNlOiByZXR1cm4gdW5pY2hyKGludCh0ZXh0WzI6LTFdKSkuZW5jb2RlKCd1dGYtOCcpCiAgICByZXR1cm4gcmUuc3ViKCIoP2kpJiNcdys7IiwgZml4dXAsIHRleHQuZGVjb2RlKCdJU08tODg1OS0xJykuZW5jb2RlKCd1dGYtOCcpKQoKZGVmIGdldF9wYXJhbXMoKToKICAgICAgICBwYXJhbT1bXQogICAgICAgIHBhcmFtc3RyaW5nPXN5cy5hcmd2WzJdCiAgICAgICAgaWYgbGVuKHBhcmFtc3RyaW5nKT49MjoKICAgICAgICAgICAgICAgIHBhcmFtcz1zeXMuYXJndlsyXQogICAgICAgICAgICAgICAgY2xlYW5lZHBhcmFtcz1wYXJhbXMucmVwbGFjZSgnPycsJycpCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2xlbihwYXJhbXMpLTFdPT0nLycpOgogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM9cGFyYW1zWzA6bGVuKHBhcmFtcyktMl0KICAgICAgICAgICAgICAgIHBhaXJzb2ZwYXJhbXM9Y2xlYW5lZHBhcmFtcy5zcGxpdCgnJicpCiAgICAgICAgICAgICAgICBwYXJhbT17fQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHBhaXJzb2ZwYXJhbXMpKToKICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9e30KICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9cGFpcnNvZnBhcmFtc1tpXS5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4oc3BsaXRwYXJhbXMpKT09MjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVtzcGxpdHBhcmFtc1swXV09c3BsaXRwYXJhbXNbMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBwYXJhbQpkZWYgR0VURkVBVFVSRUQodXJsLG5hbWUpOgogICAgICAgIENoZWNrX2hhdGVycygpCiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|LTE6CgkJCWxpbms9c291cmNlc1tpbmRleF0KCQkJc3RyZWFtX3VybCA9IHVybHJlc29sdmVyLkhvc3RlZE1lZGlhRmlsZShsaW5rKS5yZXNvbHZlKCkKCQkJbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPWZhbmFydF9pbWFnZSwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKTsgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG9yaWdpbmFsbmFtZSB9ICkKCQkJeGJtYy5QbGF5ZXIgKCkucGxheShzdHJlYW1fdXJsLGxpeixGYWxzZSkKCWVsc2U6CQkKCQl0cnk6CgkJCW5hbWU9c2VsZkFkZG9uLmdldFNldHRpbmcoJ25hbWVzdG9yZScpCgkJCXJlc3AgPSB1cmxsaWIyLnVybG9wZW4odXJsKQoJCQl1cmwyID0gcmVzcC5nZXR1cmwoKQoJCQlzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybDIpLnJlc29sdmUoKQoJCQlsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9ZmFuYXJ0X2ltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpOyBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogb3JpZ2luYWxuYW1lIH0gKQoJCQl4Ym1jLlBsYXllciAoKS5wbGF5KHN0cmVhbV91cmwsbGl6KQoJCQl4Ym1jcGx1Z2luLnNldFJlc29sdmVkVXJsKGludChzeXMuYXJndlsxXSksIFRydWUsIGxpeikKCQlleGNlcHQ6CgkJCWxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT1mYW5hcnRfaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSk7IGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBvcmlnaW5hbG5hbWUgfSApCgkJCXhibWMuUGxheWVyICgpLnBsYXkodXJsKQoJCQl4Ym1jcGx1Z2luLnNldFJlc29sdmVkVXJsKGludChzeXMuYXJndlsxXSksIFRydWUsIGxpeikKCWFkZExpbmsoIlByZXNzIEJhY2sgdG8gZXhpdCIsdXJsLCcnLGljb24sZmFuYXJ0KQkJCmRlZiBhZGREaXIyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbj0nJyk6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSsiJmRlc2NyaXB0aW9uPSIrdXJsbGliLnF1b3RlX3BsdXMoZGVzY3JpcHRpb24pCiAgICAgICAgb2s9VHJ1ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUsICdwbG90JzogZGVzY3JpcHRpb24gfSApCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBmYW5hcnQpCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1UcnVlKQogICAgICAgIHJldHVybiBvawpkZWYgYWRkTGluayhuYW1lLHVybCxtb2RlLGljb25pbWFnZSxkZXNjcmlwdGlvbj0nJyk6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImZGVzY3JpcHRpb249IitzdHIoZGVzY3JpcHRpb24pCiAgICAgICAgb2s9VHJ1ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBmYW5hcnQpCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1GYWxzZSkKICAgICAgICByZXR1cm4gb2sKZGVmIGFkZERpcihuYW1lLHVybCxtb2RlLGljb25pbWFnZSxpdGVtY291bnQsaXNGb2xkZXI9RmFsc2UpOgogICAgICAgIHRyeToKICAgICAgICAgIGlmIG5vdCAnQ09MT1InIGluIG5hbWU6CiAgICAgICAgICAgIHNwbGl0TmFtZT1uYW1lLnBhcnRpdGlvbignKCcpCiAgICAgICAgICAgIHNpbXBsZW5hbWU9IiIKICAgICAgICAgICAgc2ltcGxleWVhcj0iIgogICAgICAgICAgICBpZiBsZW4oc3BsaXROYW1lKT4wOgogICAgICAgICAgICAgICAgc2ltcGxlbmFtZT1zcGxpdE5hbWVbMF0KICAgICAgICAgICAgICAgIHNpbXBsZXllYXI9c3BsaXROYW1lWzJdLnBhcnRpdGlvbignKScpCiAgICAgICAgICAgIGlmIGxlbihzaW1wbGV5ZWFyKT4wOgogICAgICAgICAgICAgICAgc2ltcGxleWVhcj1zaW1wbGV5ZWFyWzBdCiAgICAgICAgICAgIG1nID0gbWV0YWhhbmRsZXJzLk1ldGFEYXRhKCkKICAgICAgICAgICAgbWV0YSA9IG1nLmdldF9tZXRhKCdtb3ZpZScsIG5hbWU9c2ltcGxlbmFtZSAseWVhcj1zaW1wbGV5ZWFyKQogICAgICAgICAgICB1PXN5cy5hcmd2WzBdKyI|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpCiAgICAgICAgICAgIG9rPVRydWUKICAgICAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPW1ldGFbJ2NvdmVyX3VybCddLCB0aHVtYm5haWxJbWFnZT1tZXRhWydjb3Zlcl91cmwnXSkKICAgICAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz0gbWV0YSApCiAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICBjb250ZXh0TWVudUl0ZW1zID0gW10KICAgICAgICAgICAgY29udGV4dE1lbnVJdGVtcy5hcHBlbmQoKCdNb3ZpZSBJbmZvcm1hdGlvbicsICdYQk1DLkFjdGlvbihJbmZvKScpKQogICAgICAgICAgICBsaXouYWRkQ29udGV4dE1lbnVJdGVtcyhjb250ZXh0TWVudUl0ZW1zLCByZXBsYWNlSXRlbXM9RmFsc2UpCiAgICAgICAgICAgIGlmIG5vdCBtZXRhWydiYWNrZHJvcF91cmwnXSA9PSAnJzogbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBtZXRhWydiYWNrZHJvcF91cmwnXSkKICAgICAgICAgICAgZWxzZTogbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBmYW5hcnQpCiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9aXNGb2xkZXIsdG90YWxJdGVtcz1pdGVtY291bnQpCiAgICAgICAgICAgIHJldHVybiBvawogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKQogICAgICAgICAgICBvaz1UcnVlCiAgICAgICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lIH0gKQogICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIGZhbmFydCkKICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpCiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9aXNGb2xkZXIpCiAgICAgICAgICAgIHJldHVybiBvawpkZWYgcmVnZXhfZ2V0X2FsbCh0ZXh0LCBzdGFydF93aXRoLCBlbmRfd2l0aCk6CiAgICByID0gcmUuZmluZGFsbCgiKD9pKSgiICsgc3RhcnRfd2l0aCArICJbXFNcc10rPyIgKyBlbmRfd2l0aCArICIpIiwgdGV4dCkKICAgIHJldHVybiByCQkJCQoKZGVmIHJlZ2V4X2Zyb21fdG8odGV4dCwgZnJvbV9zdHJpbmcsIHRvX3N0cmluZywgZXhjbHVkaW5nPVRydWUpOgogICAgaWYgZXhjbHVkaW5nOgoJICAgdHJ5OiByID0gcmUuc2VhcmNoKCIoP2kpIiArIGZyb21fc3RyaW5nICsgIihbXFNcc10rPykiICsgdG9fc3RyaW5nLCB0ZXh0KS5ncm91cCgxKQoJICAgZXhjZXB0OiByID0gJycKICAgIGVsc2U6CiAgICAgICB0cnk6IHIgPSByZS5zZWFyY2goIig|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKCWZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDI6CgkJCWlmICJhcmNoaXZlLm9yZyIgaW4gdXJsOgoJCQkJZ2xvYmFsX2ZldGNoLmFwcGVuZCh1cmwpCglmb3IgbmFtZSx1cmwgaW4gbWF0Y2g6CgkJCWlmICJhcmNoaXZlLm9yZyIgaW4gdXJsOgoJCQkJZ2xvYmFsX2ZldGNoLmFwcGVuZCh1cmwpCmRlZiBTRUFSQ0godXJsLG5hbWUpOgoJQ2hlY2tfaGF0ZXJzKCkKCglzZWFyY2hfZW50ZXJlZCA9JycKCWtleWJvYXJkID0geGJtYy5LZXlib2FyZChzZWFyY2hfZW50ZXJlZCwgJ1NlYXJjaCBNb3ZpZScpCglrZXlib2FyZC5kb01vZGFsKCkKCWlmIGtleWJvYXJkLmlzQ29uZmlybWVkKCk6IHNlYXJjaF9lbnRlcmVkID0ga2V5Ym9hcmQuZ2V0VGV4dCgpCglpZiBsZW4oc2VhcmNoX2VudGVyZWQpPjE6CgkJZ2xvYmFsIGdsb2JhbF9zZWFyY2ggOyBnbG9iYWxfc2VhcmNoID0gc2VhcmNoX2VudGVyZWQKCQlnbG9iYWwgZ2xvYmFsX2ZldGNoIDsgZ2xvYmFsX2ZldGNoID0gW10KCQl0aHJlYWRzX2hvc3RzID0gW3RocmVhZGluZy5UaHJlYWQodGFyZ2V0PWZldGNoX2hvc3RzLCBhcmdzPShob3N0LCkpIGZvciBob3N0IGluIGhvc3RzXQoJCWZvciB0aHJlYWQgaW4gdGhyZWFkc19ob3N0czoKCQkJdGhyZWFkLnN0YXJ0KCkKCQlmb3IgdGhyZWFkIGluIHRocmVhZHNfaG9zdHM6CgkJCXRocmVhZC5qb2luKCkKCmRlZiBHZXRTdWJsaW5rcyhuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0KToKICAgIHNvdXJjZXMgPSBbXQogICAgc25hbWUgPSBbXQogICAgbiA9IDAKICAgIGFsbF92aWRlb3MgPSByZWdleF9nZXRfYWxsKHVybCwgJ3N1Ymxpbms6JywgJyMnKQogICAgZm9yIGEgaW4gYWxsX3ZpZGVvczoKCQluID0gbisxCgkJdnVybCA9IGEucmVwbGFjZSgnc3VibGluazonLCcnKS5yZXBsYWNlKCcjJywnJykKCQlzb3VyY2VzLmFwcGVuZCh2dXJsKQoJCXNuYW1lLmFwcGVuZChuYW1lKyAnIFNvdXJjZSBbJytzdHIobikrJ10nKQoJCiAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICBpbmRleCA9IGRpYWxvZy5zZWxlY3QoJ1NlbGVjdCBhIHNvdXJjZTonLCBzbmFtZSkKICAgIGlmIGluZGV4Pi0xOgoJCQl1cmw9c291cmNlc1tpbmRleF0KCQkJdHJ5OgoJCQkJZnJvbSByZXNvdXJjZXMubGliIGltcG9ydCByZXNvbHZlcnMKCQkJCXVybCA9IHJlc29sdmVycy5yZXF1ZXN0KHVybCkKCQkJCXhibWMuUGxheWVyKCkucGxheSh1cmwpCgkJCWV4Y2VwdDoKCQkJCXRyeToKCQkJCQlyZXNvbHZlZD11cmxyZXNvbHZlci5yZXNvbHZlKHVybCkKCQkJCQlhZGRvbi5yZXNvbHZlX3VybChyZXNvbHZlZCkKCQkJCWV4Y2VwdDoKCQkJCQkgc3RyZWFtX3VybCA9IHVybHJlc29sdmVyLkhvc3RlZE1lZGlhRmlsZSh1cmwpLnJlc29sdmUoKQoJCQkJCSBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0nRGVmYXVsdFZpZGVvLnBuZycsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKCQkJCQkgeGJtYy5QbGF5ZXIgKCkucGxheShzdHJlYW1fdXJsLGxpeixGYWxzZSkKCQkKCQkJYWRkTGluaygnUHJlc3MgYmFjayB0byBleGl0JywnJywxLGljb24sZmFuYXJ0KQpkZWYgUExBWUdWSURFTyh1cmwsbmFtZSxtb2RlLGljb25pbWFnZSk6Cglzb3VyY2VzID0gW10KCXNuYW1lID0gW10KCW4gPSAwCglvcmlnaW5hbG5hbWUgPSBuYW1lCglmYW5hcnRfaW1hZ2UgPSBpY29uaW1hZ2UKCWlmICJzdWJsaW5rIiBpbiB1cmw6CgkJbWF0Y2ggPSByZS5jb21waWxlKCc8c3VibGluaz4oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCgkJCWZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaG06IHJhbmRvbWl0ZW0uYXBwZW5kKFtuYW1lLHRodW1iLHVybF0pCgkJCWZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNobTQ6IHJhbmRvbWl0ZW0uYXBwZW5kKFtuYW1lLHRodW1iLHVybF0pCgkJZXhjZXB0OiBwYXNzCgpkZWYgR0VUUkFORE9NKHVybCxuYW1lKToKCQlDaGVja19oYXRlcnMoKQoJCWdsb2JhbCByYW5kb21pdGVtIDsgcmFuZG9taXRlbSA9IFtdCgkJcmFuZG9tdXJsID0gWyJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL0hkTW92aWVzLnhtbCIsICJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL05hdmlYUGxheWxpc3QvSEQueG1sIl0gCgkJdGhyZWFkcyA9IFt0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1mZXRjaF9yYW5kb20sIGFyZ3M9KHVybCwpKSBmb3IgdXJsIGluIHJhbmRvbXVybF0KCQlmb3IgdGhyZWFkIGluIHRocmVhZHM6CgkJCXRocmVhZC5zdGFydCgpCgkJZm9yIHRocmVhZCBpbiB0aHJlYWRzOgoJCQl0aHJlYWQuam9pbigpCgkJaW5kZXggPSByYW5kb20ucmFuZHJhbmdlKDEsIGxlbihyYW5kb21pdGVtKSkKCQlpbmRleDIgPSByYW5kb20ucmFuZHJhbmdlKDEsIGxlbihyYW5kb21pdGVtKSkKCQlpbmRleDMgPSByYW5kb20ucmFuZHJhbmdlKDEsIGxlbihyYW5kb21pdGVtKSkKCQluYW1lID0gcmFuZG9taXRlbVtpbmRleF1bMF0KCQlpbWFnZSA9IHJhbmRvbWl0ZW1baW5kZXhdWzFdCgkJdXJsICAgPSByYW5kb21pdGVtW2luZGV4XVsyXQoJCW5hbWUyID0gcmFuZG9taXRlbVtpbmRleDJdWzBdCgkJaW1hZ2UyID0gcmFuZG9taXRlbVtpbmRleDJdWzFdCgkJdXJsMiAgID0gcmFuZG9taXRlbVtpbmRleDJdWzJdCgkJbmFtZTMgPSByYW5kb21pdGVtW2luZGV4M11bMF0KCQlpbWFnZTMgPSByYW5kb21pdGVtW2luZGV4M11bMV0KCQl1cmwzICA9IHJhbmRvbWl0ZW1baW5kZXgzXVsyXQoJCWFkZExpbmsobmFtZSx1cmwsMTAxLGltYWdlLGZhbmFydCkKCQlhZGRMaW5rKG5hbWUyLHVybDIsMTAxLGltYWdlMixmYW5hcnQpCgkJYWRkTGluayhuYW1lMyx1cmwzLDEwMSxpbWFnZTMsZmFuYXJ0KQoJCQkJCQojIyMjIyMgSk9ITk5ZIExJU1RTICMjIyMjIE5BTUVTIFNFVCBUTyBVUkwgRk9SIFJFU09MVkVSUyBDSEVDSwpkZWYgR0VUSkxJU1QodXJsLG5hbWUpOgoJQ2hlY2tfaGF0ZXJzKCkKCgl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCWV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCglhbGxfbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8Y2hhbm5lbD4nLCAnPC9jaGFubmVsPicpCglmb3IgbGlzdCBpbiBhbGxfbGlua3M6CgkJZGlyID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPGV4dGVybmFsbGluaz4nLCAnPC9leHRlcm5hbGxpbms|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQoJCQlmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2g6CgkJCQkJaWYgc3RyKGdsb2JhbF9zZWFyY2gpLnRpdGxlKCkgaW4gbmFtZS50aXRsZSgpOgoJCQkJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQkJCQlhZGREaXIyKG5hbWUsdXJsLDksdGh1bWIsZmFuYXJ0KQoJCQkJCQllbHNlOgoJCQkJCQkJYWRkTGluayhuYW1lICsgIiBbQ09MT1IgYmx1ZV1IaWZpWy9DT0xPUl0gLSBbQ09MT1IgcHVycGxlXU0mTVsvQ09MT1JdIix1cmwsMTAxLHRodW1iLGZhbmFydCkKCQkJZm9yIG5hbWUsdXJsIGluIG1hdGNoMjoKCQkJCQlpZiBzdHIoZ2xvYmFsX3NlYXJjaCkudGl0bGUoKSBpbiBuYW1lLnRpdGxlKCk6CgkJCQkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCQkJCWFkZERpcjIobmFtZSx1cmwsOSxpY29uLGZhbmFydCkKCQkJCQkJZWxzZToKCQkJCQkJCWFkZExpbmsobmFtZSArICIgW0NPTE9SIGJsdWVdSGlmaVsvQ09MT1JdIC0gW0NPTE9SIHB1cnBsZV1NJk1bL0NPTE9SXSIsdXJsLDEwMSxpY29uLGZhbmFydCkKCQkJZm9yIG5hbWUsZGF0ZSx1cmwgaW4gbWF0Y2gzOgoJCQkJCWlmIHN0cihnbG9iYWxfc2VhcmNoKS50aXRsZSgpIGluIG5hbWUudGl0bGUoKToKCQkJCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJCQkJYWRkRGlyMihuYW1lLHVybCw5LGljb24sZmFuYXJ0KQoJCQkJCQllbHNlOgoJCQkJCQkJYWRkTGluayhuYW1lICsgIiBbQ09MT1IgYmx1ZV1IaWZpWy9DT0xPUl0gLSBbQ09MT1IgcHVycGxlXU0mTVsvQ09MT1JdIix1cmwsMTAxLGljb24sZmFuYXJ0KQoJCQlmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaDQ6CgkJCQkJaWYgc3RyKGdsb2JhbF9zZWFyY2gpLnRpdGxlKCkgaW4gbmFtZS50aXRsZSgpOgoJCQkJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQkJCQlhZGREaXIyKG5hbWUsdXJsLDksdGh1bWIsZmFuYXJ0KQoJCQkJCQllbHNlOgoJCQkJCQkJYWRkTGluayhuYW1lICsgIiBbQ09MT1IgYmx1ZV1IaWZpWy9DT0xPUl0gLSBbQ09MT1IgcHVycGxlXU0mTVsvQ09MT1JdIix1cmwsMTAxLHRodW1iLGZhbmFydCkKCQlleGNlcHQ6IHBhc3MKCQl0cnk6CgkJCWl0ZW1fbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8aXRlbT4nLCAnPC9pdGVtPicpCgkJCWZvciBsaXN0IGluIGl0ZW1fbGlua3M6CgkJCQluYW1lID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPHRpdGxlPicsICc8L3RpdGxlPicpCgkJCQlwbGF5dXJsID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPGxpbms|KVxzKnRodW1iPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQoKICAgICAgICBmb3IgbmFtZSx1cmwsdGh1bWIgaW4gbWF0Y2g1OgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDEwLHRodW1iLGZhbmFydGhpZmkpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYix0aHVtYikKCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoMjoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCwxMCx0aHVtYixmYW5hcnRoaWZpKQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsdGh1bWIpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDEwLHRodW1iLGZhbmFydGhpZmkpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnRoaWZpKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCwxMCxpY29uMyxmYW5hcnRoaWZpKQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsaWNvbjMsZmFuYXJ0aGlmaSkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsMTAsaWNvbjMsZmFuYXJ0aGlmaSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24zLGZhbmFydGhpZmkpCmRlZiBHRVRMSU5LU05FVyh1cmwsbmFtZSxpY29uaW1hZ2UpOgoJCW51bVRyaWVzID0gNwoJCWhvc3QgPSAwCgkJdXJsb3JpZyA9IHVybAoJCW9yaWdpbmFsbmFtZSA9IG5hbWUKCQl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCQlleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQoJCW1hdGNobGluaz1yZS5jb21waWxlKCdkYXRhLWxpbms9IiguKz8pIj4nKS5maW5kYWxsKGxpbmspCgkJbWF0Y2hsaW5rMj1yZS5jb21waWxlKCI8YSBzdHlsZT0nLis|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOiBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCiAgICAgICAgdXJsMiA9ICJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL05hdmlYUGxheWxpc3QvSEQueG1sIgogICAgICAgIHRyeTpsaW5rMiA9IG9wZW5fdXJsKHVybDIpCiAgICAgICAgZXhjZXB0OmxpbmsyID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybDIsIG1vYmlsZT1UcnVlKQogICAgICAgIAogICAgICAgIG1hdGNobT1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKICAgICAgICBtYXRjaG0yPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKICAgICAgICBtYXRjaG0zPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgbWF0Y2htND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNobToKICAgICAgICAgICAgICAgIG5hbWU9cmUuc3ViKHInXC4nLHInICcsIG5hbWUpCiAgICAgICAgICAgICAgICBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYix0aHVtYikKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2htMjoKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24sZmFuYXJ0KQogICAgICAgIGZvciBuYW1lLGRhdGUsdXJsIGluIG1hdGNobTM6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaG00OgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQkJCmRlZiBmZXRjaF9yYW5kb20odXJsKToKCQlsaW5rID0gb3Blbl91cmwodXJsKQoJCXRyeToKCQkJbWF0Y2htPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCw5LHRodW1iLGZhbmFydCkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLHRodW1iKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsOSxpY29uLGZhbmFydCkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24sZmFuYXJ0KQogICAgICAgIGZvciBuYW1lLGRhdGUsdXJsIGluIG1hdGNoMzoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCw5LGljb24sZmFuYXJ0KQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsaWNvbixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDksdGh1bWIsZmFuYXJ0KQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQpkZWYgR0VURVBJU09ERVModXJsLG5hbWUpOgogICAgICAgIHRyeTpsaW5rID0gb3Blbl91cmwodXJsKQogICAgICAgIGV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCiAgICAgICAgbWF0Y2g9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoOgogICAgICAgICAgICAgICAgbmFtZT1yZS5zdWIocidcLicscicgJywgbmFtZSkKICAgICAgICAgICAgICAgIGFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLHRodW1iKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaDQ6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCQkKZGVmIEdFVE1NKHVybCxuYW1lKToKICAgICAgICBDaGVja19oYXRlcnMoKQoKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoX3JhbmRvbT1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbityYW5kb20nKS5maW5kYWxsKGxpbmspCgogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|aW1wb3J0IHVybGxpYix1cmxsaWIyLHJlLHhibWNwbHVnaW4seGJtY2d1aSx1cmxyZXNvbHZlcixzeXMseGJtYyx4Ym1jYWRkb24sb3MsdXJscGFyc2UscmFuZG9tCmZyb20gdDBtbTAuY29tbW9uLmFkZG9uIGltcG9ydCBBZGRvbgpmcm9tIG1ldGFoYW5kbGVyIGltcG9ydCBtZXRhaGFuZGxlcnMKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2FjaGUKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2xpZW50CmZyb20gcmVzb3VyY2VzLmxpYi5saWJyYXJpZXMgaW1wb3J0IGNsb3VkZmxhcmUKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2FydG9vbnMKaW1wb3J0IHRocmVhZGluZwpob3N0cyA9IFsiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9oaWZpbW92aWVzZG9jcy9tYWluX3BhZ2UueG1sIiwgImh0dHBzOi8vYXJjaGl2ZS5vcmcvZG93bmxvYWQvTmF2aVhQbGF5bGlzdC9wbGF5bGlzdF9tYXJpLnhtbCIsICJodHRwOi8vcGFzdGViaW4uY29tL3Jhdy5waHA|JywgJzwvbGluaz4nKQoJCQkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCQkJaWYgcGxheXVybDoKCQkJCQlpZiAic3VibGluayIgaW4gcGxheXVybDoKCQkJCQkJaWYgc3RyKGdsb2JhbF9zZWFyY2gpLnRpdGxlKCkgaW4gbmFtZS50aXRsZSgpOmFkZERpcjIobmFtZSsiICBbQ09MT1IgeWVsbG93XU1pZG5pZ2h0IFNvY2lldHlbL0NPTE9SXSIscGxheXVybCwzMSx0aHVtYixmYW5hcnQpCgkJCQkJZWxzZToKCQkJCQkJaWYgc3RyKGdsb2JhbF9zZWFyY2gpLnRpdGxlKCkgaW4gbmFtZS50aXRsZSgpOmFkZExpbmsobmFtZSsiICBbQ09MT1IgeWVsbG93XU1pZG5pZ2h0IFNvY2lldHlbL0NPTE9SXSIscGxheXVybCwxMDEsdGh1bWIsZmFuYXJ0KQkJCQkKCQlleGNlcHQ6IHBhc3MKCmRlZiBmZXRjaF9ob3N0cyhob3N0KToKCWxpbmsgPSBvcGVuX3VybChob3N0KQoJYWxsX2xpbmtzID0gcmVnZXhfZ2V0X2FsbChsaW5rLCAnPGNoYW5uZWw|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LHRodW1iLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LHRodW1iLGZhbmFydCkKZGVmIEdFVF9TRUFSQ0hfRk9MREVSUyh1cmwsbmFtZSk6CiAgICAgICAgQ2hlY2tfaGF0ZXJzKCkKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXHMqcGxheWVyPScpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2gyOgoJCQkJYWRkRGlyMihuYW1lLHVybCwxMDEsaWNvbiwnJykKZGVmIEdFVFNIT1dTKHVybCxuYW1lKToKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmICJwYXN0ZWJpbiIgaW4gdXJsOgoJCQlnbG9iYWxfZmV0Y2guYXBwZW5kKHVybCkKCQllbGlmICJwYXN0ZWJpbiIgaW4gZGlyOgoJCQlnbG9iYWxfZmV0Y2guYXBwZW5kKGRpcikKCgltYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQoJbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KScgdGFyZ2V0PSdfYmxhbmsnIikuZmluZGFsbChsaW5rKQoJCWZvciB1cmwgaW4gbWF0Y2hsaW5rOgoJCQkJCQlob3N0PXVybC5zcGxpdCgnLycpWzJdLnJlcGxhY2UoJ3d3dy4nLCcnKS5jYXBpdGFsaXplKCkKCQkJCQkJYWRkTGluayh1cmwsdXJsLDEwMSxpY29uLCcnKQpkZWYgR0VUTElWRSh1cmwsbmFtZSk6CiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgIAogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmIHVybDoKCQkJaWYgInN1YmxpbmsiIGluIHVybDoKCQkJCWFkZERpcjIobmFtZSx1cmwsMzEsdGh1bWIsZmFuYXJ0KQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQoJeW91dHViZV9saW5rcyA9IHJlZ2V4X2dldF9hbGwobGluaywgJzxpdGVtPicsICc8L2l0ZW0|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMz1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqZGF0ZT0oLis|JywgJzwvdGh1bWJuYWlsPicpCgkJaWYgdXJsOgoJCQlpZiAic3VibGluayIgaW4gdXJsOgoJCQkJYWRkRGlyMihuYW1lLHVybCwzMSx0aHVtYixmYW5hcnQpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgoKZGVmIGZldGNoX3VybCh1cmwsZ2xvYmFsX3NlYXJjaCk6CgkJbGluayA9IG9wZW5fdXJsKHVybCkKCQl0cnk6CgkJCW1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JykKCWZvciBsaXN0IGluIHlvdXR1YmVfbGlua3M6CgkJbmFtZSA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aXRsZT4nLCAnPC90aXRsZT4nKQoJCXVybCA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx1dHViZT4nLCAnPC91dHViZT4nKQoJCXVybCA9ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PSIgKyB1cmwKCQl0aHVtYiA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aHVtYm5haWw|KTwvc3VibGluaz4nKS5maW5kYWxsKHVybCkKCQlmb3IgbGlzdCBpbiBtYXRjaDoKCQkJbj1uKzEKCQkJc291cmNlcy5hcHBlbmQobGlzdCkKCQkJc25hbWUuYXBwZW5kKG5hbWUrICcgU291cmNlIFsnK3N0cihuKSsnXScpCgkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCWluZGV4ID0gZGlhbG9nLnNlbGVjdCgnU2VsZWN0IGEgc291cmNlOicsIHNvdXJjZXMpCgkJaWYgaW5kZXg|KVxuK3AnKS5maW5kYWxsKGxpbmspCgkJCW1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKCQkJbWF0Y2gzPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKCQkJbWF0Y2g0PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JywgJzwvdGh1bWJuYWlsPicpCgkJaWYgImlnbm9yZSIgaW4gdXJsOgoJCQlhZGREaXIyKG5hbWUsZGlyLDMwLHRodW1iLGZhbmFydCkKCQkKCWl0ZW1fbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8aXRlbT4nLCAnPC9pdGVtPicpCglmb3IgbGlzdCBpbiBpdGVtX2xpbmtzOgoJCW5hbWUgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGl0bGU|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDU9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKlVSTD0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2g0PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gzPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDQ9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|JywgJzwvY2hhbm5lbD4nKQoJZm9yIGxpc3QgaW4gYWxsX2xpbmtzOgoJCWRpciA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxleHRlcm5hbGxpbms|JywgJzwvZXh0ZXJuYWxsaW5rPicpCgkJbmFtZSA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxuYW1lPicsICc8L25hbWU|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDM9cmUuY29tcGlsZSgnbmFtZT0oLis|JywgJzwvbmFtZT4nKQoJCXVybCA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxsaW5rPicsICc8L2xpbms|KVxuK3AnKS5maW5kYWxsKGxpbmspCgkJCW1hdGNobTQ9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKnRodW1iPSguKz8pXHMqZGF0ZT0oLis|JykKCQl0aHVtYiA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aHVtYm5haWw|JykKCQluYW1lID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPG5hbWU|aSkoIiArIGZyb21fc3RyaW5nICsgIltcU1xzXSs|JyBocmVmPScoLis|JywgJzwvdGl0bGU|base64|b64decode|import|exec".split("|")))