exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MzIgMzA7MzMgMzAuMzEoJzEwLzEvMjUvMjEvMWIvOC8zNCsxMS8yMS8xMy9mL2EvMjEvMWYvMjEvMjYvYi8yNC8yMS8xZS8yNS8yMS8xYi8yLzE3LzkvMTkvMjEvMmEvMjUvMjEvZS83KzFhKzIwKzE4KzIyKzI3KzE2KzJlKzJjKzJmKzJiLzE1LzIxLzFkLzIxLzI5LzIxLzUrMjgrMmUrMjMrMTIrMWErMjArMTQvMjEvNiszL2QvNC9jLzFjLzJkLzA9Jyk=")))(lambda a,b:b[int("0x"+a.group(1),16)],"KSIgKyB0b19zdHJpbmcsIHRleHQpLmdyb3VwKDEpCgkgICBleGNlcHQ6IHIgPSAnJwogICAgZWxzZToKICAgICAgIHRyeTogciA9IHJlLnNlYXJjaCgiKD9pKSgiICsgZnJvbV9zdHJpbmcgKyAiW1xTXHNdKz8iICsgdG9fc3RyaW5nICsgIikiLCB0ZXh0KS5ncm91cCgxKQogICAgICAgZXhjZXB0OiByID0gJycKICAgIHJldHVybiByICAgICAgICAKZGVmIG9wZW5fdXJsKHVybCk6CiAgICAgICAgIyB1cmw9dXJsLnJlcGxhY2UoJyAnLCclMjAnKQogICAgICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwpCiAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCAnTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNS4xOyBlbi1HQjsgcnY6MS45LjAuMykgR2Vja28vMjAwODA5MjQxNyBGaXJlZm94LzMuMC4zJykKICAgICAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXEpCiAgICAgICAgbGluaz1yZXNwb25zZS5yZWFkKCkKICAgICAgICByZXNwb25zZS5jbG9zZSgpCiAgICAgICAgcmV0dXJuIGxpbmsKCmRlZiBzZXRWaWV3KGNvbnRlbnQsIHZpZXdUeXBlKToKICAgIGlmIGNvbnRlbnQ6CiAgICAgICAgeGJtY3BsdWdpbi5zZXRDb250ZW50KGludChzeXMuYXJndlsxXSksIGNvbnRlbnQpCiAgICBpZiBzZWxmQWRkb24uZ2V0U2V0dGluZygnYXV0by12aWV3Jyk9PSd0cnVlJzoKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJDb250YWluZXIuU2V0Vmlld01vZGUoJXMpIiAlIHNlbGZBZGRvbi5nZXRTZXR0aW5nKHZpZXdUeXBlKSApCgpwYXJhbXM9Z2V0X3BhcmFtcygpOyB1cmw9Tm9uZTsgbmFtZT1Ob25lOyBtb2RlPU5vbmU7IHNpdGU9Tm9uZTsgaWNvbmltYWdlPU5vbmUKdHJ5OiBzaXRlPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJzaXRlIl0pCmV4Y2VwdDogcGFzcwp0cnk6IHVybD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidXJsIl0pCmV4Y2VwdDogcGFzcwp0cnk6IG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkKZXhjZXB0OiBwYXNzCnRyeTogbW9kZT1pbnQocGFyYW1zWyJtb2RlIl0pCmV4Y2VwdDogcGFzcwp0cnk6IGljb25pbWFnZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siaWNvbmltYWdlIl0pCmV4Y2VwdDogcGFzcwpwcmludCAiU2l0ZTogIitzdHIoc2l0ZSk7IHByaW50ICJNb2RlOiAiK3N0cihtb2RlKTsgcHJpbnQgIlVSTDogIitzdHIodXJsKTsgcHJpbnQgIk5hbWU6ICIrc3RyKG5hbWUpCnByaW50IHBhcmFtcwpkZWYgQ2hlY2tfaGF0ZXJzKCk6CgkJc2FmZV90b19nbyA9IDAKCQluYW1lID0gInBsdWdpbi52aWRlby50aXRhbiIKCQlpbXBvcnQgc2h1dGlsCgkJZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoSE9NRSx0b3Bkb3duPVRydWUpOgoJCQkJaWYgInNwYXJ0YW4iIGluIHN0cihkaXJzKToKCQkJCQlkaWFsb2cub2soJ1tDT0xPUiBsaW1lXVtCXVRpdGFuWy9CXVsvQ09MT1JdW0NPTE9SIHdoaXRlXSBBdXRvZGV0ZWN0Wy9DT0xPUl0gJywnVGl0YW4gYWRkb24gZG9lc250IHN1cHBvcnQgc2NhbW1lcnMgYW5kIGRpc2hvbmVzdCByZXZpZXdlcnMuLi4gSWYgeW91IGhhdmUgaW5zdGFsbGVkIGFueXRoaW5nIHJlbGF0ZWQgdG8gc3BhcnRhbnBpeGVsIHRoaXMgYWRkb24gd2lsbCBub3Qgd29yayBmb3IgeW91LCBhbmQgeW91IHNob3VsZCB1c2UgYSBkaWZmZXJlbnQgYnVpbGQsIHBsZW50eSBvZiBmcmVlIGJ1aWxkIG91dCB0aGVyZScsJycsJycpCgkJCQkJZm9yIGRpciBpbiBkaXJzOgoJCQkJCQlzaHV0aWwucm10cmVlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQoJCQkJaWYgInRlY2h0aW1lcnV1IiBpbiBzdHIoZGlycyk6CgkJCQkJZGlhbG9nLm9rKCdbQ09MT1IgbGltZV1bQl1UaXRhblsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV0gQXV0b2RldGVjdFsvQ09MT1JdICcsJ1RpdGFuIGFkZG9uIGRvZXNudCBzdXBwb3J0IHNjYW1tZXJzIGFuZCBkaXNob25lc3QgcmV2aWV3ZXJzLi4uIElmIHlvdSBoYXZlIGluc3RhbGxlZCBhbnl0aGluZyByZWxhdGVkIHRvIHNwYXJ0YW5waXhlbCB0aGlzIGFkZG9uIHdpbGwgbm90IHdvcmsgZm9yIHlvdSwgYW5kIHlvdSBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGJ1aWxkLCBwbGVudHkgb2YgZnJlZSBidWlsZCBvdXQgdGhlcmUnLCcnLCcnKQoJCQkJCWZvciBkaXIgaW4gZGlyczoKCQkJCQkJc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKCQkJCWlmICJ0ZWNodGltZXJ1IiBpbiBzdHIoZGlycyk6CgkJCQkJZGlhbG9nLm9rKCdbQ09MT1IgbGltZV1bQl1UaXRhblsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV0gQXV0b2RldGVjdFsvQ09MT1JdICcsJ1RpdGFuIGFkZG9uIGRvZXNudCBzdXBwb3J0IHNjYW1tZXJzIGFuZCBkaXNob25lc3QgcmV2aWV3ZXJzLi4uIElmIHlvdSBoYXZlIGluc3RhbGxlZCBhbnl0aGluZyByZWxhdGVkIHRvIHNwYXJ0YW5waXhlbCB0aGlzIGFkZG9uIHdpbGwgbm90IHdvcmsgZm9yIHlvdSwgYW5kIHlvdSBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGJ1aWxkLCBwbGVudHkgb2YgZnJlZSBidWlsZCBvdXQgdGhlcmUnLCcnLCcnKQoJCQkJCWZvciBkaXIgaW4gZGlyczoKCQkJCQkJc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKCQkJCWlmICJ0ZWNodGltZXJ1dXUiIGluIHN0cihkaXJzKToKCQkJCQlkaWFsb2cub2soJ1tDT0xPUiBsaW1lXVtCXVRpdGFuWy9CXVsvQ09MT1JdW0NPTE9SIHdoaXRlXSBBdXRvZGV0ZWN0Wy9DT0xPUl0gJywnVGl0YW4gYWRkb24gZG9lc250IHN1cHBvcnQgc2NhbW1lcnMgYW5kIGRpc2hvbmVzdCByZXZpZXdlcnMuLi4gSWYgeW91IGhhdmUgaW5zdGFsbGVkIGFueXRoaW5nIHJlbGF0ZWQgdG8gc3BhcnRhbnBpeGVsIHRoaXMgYWRkb24gd2lsbCBub3Qgd29yayBmb3IgeW91LCBhbmQgeW91IHNob3VsZCB1c2UgYSBkaWZmZXJlbnQgYnVpbGQsIHBsZW50eSBvZiBmcmVlIGJ1aWxkIG91dCB0aGVyZScsJycsJycpCgkJCQkJZm9yIGRpciBpbiBkaXJzOgoJCQkJCQlzaHV0aWwucm10cmVlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQkJCQkJCgkJCQlpZiAic3BhcnRhbnBpeGVsIiBpbiBzdHIoZGlycyk6CgkJCQkJZGlhbG9nLm9rKCdbQ09MT1IgbGltZV1bQl1UaXRhblsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV0gQXV0b2RldGVjdFsvQ09MT1JdICcsJ1RpdGFuIGFkZG9uIGRvZXNudCBzdXBwb3J0IHNjYW1tZXJzIGFuZCBkaXNob25lc3QgcmV2aWV3ZXJzLi4uIElmIHlvdSBoYXZlIGluc3RhbGxlZCBhbnl0aGluZyByZWxhdGVkIHRvIHNwYXJ0YW5waXhlbCB0aGlzIGFkZG9uIHdpbGwgbm90IHdvcmsgZm9yIHlvdSwgYW5kIHlvdSBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGJ1aWxkLCBwbGVudHkgb2YgZnJlZSBidWlsZCBvdXQgdGhlcmUnLCcnLCcnKQoJCQkJCWZvciBkaXIgaW4gZGlyczoKCQkJCQkJc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkJCQoKaWYgbW9kZT09Tm9uZSBvciB1cmw9PU5vbmUgb3IgbGVuKHVybCk8MTogQ0FURUdPUklFUygpCmVsaWYgbW9kZT09MzogR0VUU0hPV1ModXJsLG5hbWUpCmVsaWYgbW9kZT09NDogR0VUTElWRSh1cmwsbmFtZSkKZWxpZiBtb2RlPT01OiBHRVRFUElTT0RFUyh1cmwsbmFtZSkKZWxpZiBtb2RlPT02OiBHRVRNTSh1cmwsbmFtZSkKCmVsaWYgbW9kZT09ODogU0VBUkNIKHVybCxuYW1lKQplbGlmIG1vZGU9PTk6IEdFVF9TRUFSQ0hfRk9MREVSUyh1cmwsbmFtZSkKZWxpZiBtb2RlPT0xMDogSElGSShuYW1lLHVybCkKCmVsaWYgbW9kZT09MTAxOiBQTEFZTU9WSUUobmFtZSx1cmwpCmVsaWYgbW9kZT09MTAyOiBHRVRSQU5ET00odXJsLG5hbWUpCmVsaWYgbW9kZT09MjE6IEdFVEZFQVRVUkVEKHVybCxuYW1lKQplbGlmIG1vZGU9PTMwOiBHRVRKTElTVCh1cmwsbmFtZSkKZWxpZiBtb2RlPT0zMTogR2V0U3VibGlua3MobmFtZSx1cmwsaWNvbmltYWdlLGZhbmFydCkKZWxpZiBtb2RlID09IDk5OTogY2FydG9vbnMuQ2FydG9vbkRpcmVjdG9yeSgpCmVsaWYgbW9kZSA9PSA5OTg6IAoJZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgdGl0YW5saXZlCgl0aXRhbmxpdmUucmFuZG9tdHYodXJsKQp4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgo|aT1BejdLeHlTRCJdCnRyeTogYWN0aW9uID0gZGljdCh1cmxwYXJzZS5wYXJzZV9xc2woc3lzLmFyZ3ZbMl0ucmVwbGFjZSgnPycsJycpKSlbJ2FjdGlvbiddCmV4Y2VwdDogYWN0aW9uID0gTm9uZQphZGRvbl9pZCA9ICdwbHVnaW4udmlkZW8udGl0YW4nCnNlbGZBZGRvbiA9IHhibWNhZGRvbi5BZGRvbihpZD1hZGRvbl9pZCkKYWRkb24gPSBBZGRvbihhZGRvbl9pZCwgc3lzLmFyZ3YpCmZhbmFydCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgLCAnZmFuYXJ0LmpwZycpKQpyYW5kb21pY28gPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L3JhbmRvbS5wbmcnKSkKaWNvbiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29uLnBuZycpKQppY29uMiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvbW0ucG5nJykpCmljb24zID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9oaWZpLnBuZycpKQppY29uNCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvZmVhdHVyZWQucG5nJykpCmljb241ID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9qaWNvbi5wbmcnKSkKaWNvbjYgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2cxMGljb24ucG5nJykpCmljb25fYW5pbWUgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2FuaW1lLnBuZycpKQpmYW5hcnRoaWZpID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9oaWZpYmcuanBnJykpCmZhbmFydG1tID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9tbWJnLmpwZycpKQpmYW5hcnRmZWF0dXJlID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9mZWF0dXJlZGJnLmpwZycpKQpmYW5hcnRqID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9qZmFuYXJ0LmpwZycpKQpmYW5hcnRnMTAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2ljZWZhbmFydC5qcGVnJykpCmFuaW1lZmFuID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9hbmltZWZhbi5qcGcnKSkKc2VhcmNoaWNvbiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvc2VhcmNoLnBuZycpKQppY2VpY29uID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9pY2UucG5nJykpCm1ldGFzZXQgPSBzZWxmQWRkb24uZ2V0U2V0dGluZygnZW5hYmxlX21ldGEnKQphZGRvbiA9IEFkZG9uKGFkZG9uX2lkLCBzeXMuYXJndikKbGl2ZXR2ID0gWycubTN1OCcsJy50cz0nLCdydG1wOi8vJywnaXB0dm5hdGlvbiddCkhPTUUgICAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9ob21lLycpCkVYQ0xVREVfSEFURVIgICA9IFsnc3BhcnRhbicsJ3RlY2h0aW1lcnV1JywgJ3NwYXJ0YW5waXhlbCcgLCAnYmVhc3QnLCAncm95YWxpc3QnLCdTcGFydGFucGl4ZWwnLCdTcGFydGFuJ10KZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQpkZWYgQ0FURUdPUklFUygpOgoJQ2hlY2tfaGF0ZXJzKCkJCglhZGREaXIyKCdGZWF0dXJlZCBIRCBNb3ZpZXMnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL0hkTW92aWVzLnhtbCcsMjEsaWNvbjQsZmFuYXJ0ZmVhdHVyZSkKCWFkZERpcjIoJ0hpRmkgV29ybGQnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL21haW5fcGFnZS54bWwnLDEwLGljb24zLGZhbmFydGhpZmkpCglhZGREaXIyKCdNJk1zIFdvcmxkJywnaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9OYXZpWFBsYXlsaXN0L3BsYXlsaXN0X21hcmkueG1sJyw2LGljb24yLGZhbmFydG1tKQoJYWRkRGlyMignTWlkbmlnaHQgU29jaWV0eScsJ2h0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3L3FWOWtHNkZrJywzMCxpY29uNSxmYW5hcnRqKQoKCWFkZERpcjIoJ0FuaW1lIFpvbmUnLCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkLycsOTk5LGljb25fYW5pbWUsYW5pbWVmYW4pCglhZGREaXIyKCdSYW5kb20gMyBQaWNrcycsJ2h0dHA6Ly8nLDEwMixyYW5kb21pY28sZmFuYXJ0KQoJYWRkRGlyMignU2VhcmNoJywnaHR0cDovL3RpdGFuJyw4LHNlYXJjaGljb24sZmFuYXJ0KQoJeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKDUwMCkiKQoKZGVmIEhJRkkobmFtZSx1cmwpOgogICAgICAgIENoZWNrX2hhdGVycygpCiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXInKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gzPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDQ9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKnBsYXllcicpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2hfcmFuZG9tOgoJCQlhZGREaXIyKG5hbWUsdXJsLDk5OCx0aHVtYixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoOgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDYsdGh1bWIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnRtbSkJCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDYsdGh1bWIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnRtbSkKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2gyOgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDYsaWNvbjIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uMixmYW5hcnRtbSkJCiAgICAgICAgZm9yIG5hbWUsZGF0ZSx1cmwgaW4gbWF0Y2gzOgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDYsaWNvbjIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uMixmYW5hcnRtbSkKICAgICAgICBmb3IgbmFtZSx1cmwsdGh1bWIgaW4gbWF0Y2g1OgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDYsaWNvbjIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnRtbSkJCQkJCmRlZiBQTEFZTU9WSUUobmFtZSx1cmwpOgoJaWYiLm0zdTgiIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCgllbGlmICJpcHR2bmF0aW9uIiBpbiB1cmw6CgkJIyB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCQkjIGV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCgkJYWRkb24ucmVzb2x2ZV91cmwodXJsKQoJZWxpZiAiLnRzPSIgaW4gdXJsOgoJCWFkZG9uLnJlc29sdmVfdXJsKHVybCkKCWVsaWYgInJ0bXA6Ly8iIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCQkKCWVsaWYgInBvbXBhMS5ub3N2aWRlbyIgaW4gdXJsOgoJCWFkZG9uLnJlc29sdmVfdXJsKHVybCkJCgllbHNlOgoJCXRyeToKCQkJcmVzb2x2ZWQ9dXJscmVzb2x2ZXIucmVzb2x2ZSh1cmwpCgkJCWFkZG9uLnJlc29sdmVfdXJsKHJlc29sdmVkKQoJCWV4Y2VwdDogCgkJCXRyeToKCQkJCXN0cmVhbV91cmwgPSB1cmxyZXNvbHZlci5Ib3N0ZWRNZWRpYUZpbGUodXJsKS5yZXNvbHZlKCkKCQkJCWxpeiA9IHhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSdEZWZhdWx0VmlkZW8ucG5nJywgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQoJCQkJeGJtYy5QbGF5ZXIgKCkucGxheShzdHJlYW1fdXJsLGxpeixGYWxzZSkKCQkJZXhjZXB0OgoJCQkJdHJ5OgoJCQkJCWZyb20gcmVzb3VyY2VzLmxpYiBpbXBvcnQgcmVzb2x2ZXJzCgkJCQkJdXJsID0gcmVzb2x2ZXJzLnJlcXVlc3QodXJsKQoJCQkJCWFkZG9uLnJlc29sdmVfdXJsKHVybCkKCQkJCWV4Y2VwdDogcGFzcwkJCgkJYWRkTGluaygnUHJlc3MgYmFjayB0byBleGl0JywnJywxLGljb24sZmFuYXJ0KQogICAgCmRlZiBjbGVhbkhleCh0ZXh0KToKICAgIGRlZiBmaXh1cChtKToKICAgICAgICB0ZXh0ID0gbS5ncm91cCgwKQogICAgICAgIGlmIHRleHRbOjNdID09ICImI3giOiByZXR1cm4gdW5pY2hyKGludCh0ZXh0WzM6LTFdLCAxNikpLmVuY29kZSgndXRmLTgnKQogICAgICAgIGVsc2U6IHJldHVybiB1bmljaHIoaW50KHRleHRbMjotMV0pKS5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiByZS5zdWIoIig|LTE6CgkJCXVybD1zb3VyY2VzW2luZGV4XQoJCQl0cnk6CgkJCQlmcm9tIHJlc291cmNlcy5saWIgaW1wb3J0IHJlc29sdmVycwoJCQkJdXJsID0gcmVzb2x2ZXJzLnJlcXVlc3QodXJsKQoJCQkJeGJtYy5QbGF5ZXIoKS5wbGF5KHVybCkKCQkJZXhjZXB0OgoJCQkJdHJ5OgoJCQkJCXJlc29sdmVkPXVybHJlc29sdmVyLnJlc29sdmUodXJsKQoJCQkJCWFkZG9uLnJlc29sdmVfdXJsKHJlc29sdmVkKQoJCQkJZXhjZXB0OgoJCQkJCSBzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybCkucmVzb2x2ZSgpCgkJCQkJIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSdEZWZhdWx0VmlkZW8ucG5nJywgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQoJCQkJCSB4Ym1jLlBsYXllciAoKS5wbGF5KHN0cmVhbV91cmwsbGl6LEZhbHNlKQoJCQoJCQlhZGRMaW5rKCdQcmVzcyBiYWNrIHRvIGV4aXQnLCcnLDEsaWNvbixmYW5hcnQpCmRlZiBQTEFZR1ZJREVPKHVybCxuYW1lLG1vZGUsaWNvbmltYWdlKToKCXNvdXJjZXMgPSBbXQoJc25hbWUgPSBbXQoJbiA9IDAKCW9yaWdpbmFsbmFtZSA9IG5hbWUKCWZhbmFydF9pbWFnZSA9IGljb25pbWFnZQoJaWYgInN1YmxpbmsiIGluIHVybDoKCQltYXRjaCA9IHJlLmNvbXBpbGUoJzxzdWJsaW5rPiguKz8pPC9zdWJsaW5rPicpLmZpbmRhbGwodXJsKQoJCWZvciBsaXN0IGluIG1hdGNoOgoJCQluPW4rMQoJCQlzb3VyY2VzLmFwcGVuZChsaXN0KQoJCQlzbmFtZS5hcHBlbmQobmFtZSsgJyBTb3VyY2UgWycrc3RyKG4pKyddJykKCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCgkJaW5kZXggPSBkaWFsb2cuc2VsZWN0KCdTZWxlY3QgYSBzb3VyY2U6Jywgc291cmNlcykKCQlpZiBpbmRleD4tMToKCQkJbGluaz1zb3VyY2VzW2luZGV4XQoJCQlzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKGxpbmspLnJlc29sdmUoKQoJCQlsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9ZmFuYXJ0X2ltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpOyBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogb3JpZ2luYWxuYW1lIH0gKQoJCQl4Ym1jLlBsYXllciAoKS5wbGF5KHN0cmVhbV91cmwsbGl6LEZhbHNlKQoJZWxzZToJCQoJCXRyeToKCQkJbmFtZT1zZWxmQWRkb24uZ2V0U2V0dGluZygnbmFtZXN0b3JlJykKCQkJcmVzcCA9IHVybGxpYjIudXJsb3Blbih1cmwpCgkJCXVybDIgPSByZXNwLmdldHVybCgpCgkJCXN0cmVhbV91cmwgPSB1cmxyZXNvbHZlci5Ib3N0ZWRNZWRpYUZpbGUodXJsMikucmVzb2x2ZSgpCgkJCWxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT1mYW5hcnRfaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSk7IGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBvcmlnaW5hbG5hbWUgfSApCgkJCXhibWMuUGxheWVyICgpLnBsYXkoc3RyZWFtX3VybCxsaXopCgkJCXhibWNwbHVnaW4uc2V0UmVzb2x2ZWRVcmwoaW50KHN5cy5hcmd2WzFdKSwgVHJ1ZSwgbGl6KQoJCWV4Y2VwdDoKCQkJbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPWZhbmFydF9pbWFnZSwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKTsgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG9yaWdpbmFsbmFtZSB9ICkKCQkJeGJtYy5QbGF5ZXIgKCkucGxheSh1cmwpCgkJCXhibWNwbHVnaW4uc2V0UmVzb2x2ZWRVcmwoaW50KHN5cy5hcmd2WzFdKSwgVHJ1ZSwgbGl6KQoJYWRkTGluaygiUHJlc3MgQmFjayB0byBleGl0Iix1cmwsJycsaWNvbixmYW5hcnQpCQkKZGVmIGFkZERpcjIobmFtZSx1cmwsbW9kZSxpY29uaW1hZ2UsZmFuYXJ0LGRlc2NyaXB0aW9uPScnKToKICAgICAgICB1PXN5cy5hcmd2WzBdKyI|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZkZXNjcmlwdGlvbj0iK3N0cihkZXNjcmlwdGlvbikKICAgICAgICBvaz1UcnVlCiAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIGZhbmFydCkKICAgICAgICBsaXouc2V0UHJvcGVydHkoIklzUGxheWFibGUiLCJ0cnVlIikKICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPUZhbHNlKQogICAgICAgIHJldHVybiBvawpkZWYgYWRkRGlyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGl0ZW1jb3VudCxpc0ZvbGRlcj1GYWxzZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgaWYgbm90ICdDT0xPUicgaW4gbmFtZToKICAgICAgICAgICAgc3BsaXROYW1lPW5hbWUucGFydGl0aW9uKCcoJykKICAgICAgICAgICAgc2ltcGxlbmFtZT0iIgogICAgICAgICAgICBzaW1wbGV5ZWFyPSIiCiAgICAgICAgICAgIGlmIGxlbihzcGxpdE5hbWUpPjA6CiAgICAgICAgICAgICAgICBzaW1wbGVuYW1lPXNwbGl0TmFtZVswXQogICAgICAgICAgICAgICAgc2ltcGxleWVhcj1zcGxpdE5hbWVbMl0ucGFydGl0aW9uKCcpJykKICAgICAgICAgICAgaWYgbGVuKHNpbXBsZXllYXIpPjA6CiAgICAgICAgICAgICAgICBzaW1wbGV5ZWFyPXNpbXBsZXllYXJbMF0KICAgICAgICAgICAgbWcgPSBtZXRhaGFuZGxlcnMuTWV0YURhdGEoKQogICAgICAgICAgICBtZXRhID0gbWcuZ2V0X21ldGEoJ21vdmllJywgbmFtZT1zaW1wbGVuYW1lICx5ZWFyPXNpbXBsZXllYXIpCiAgICAgICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj91cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK3N0cihtb2RlKSsiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSsiJmljb25pbWFnZT0iK3VybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZSkKICAgICAgICAgICAgb2s9VHJ1ZQogICAgICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9bWV0YVsnY292ZXJfdXJsJ10sIHRodW1ibmFpbEltYWdlPW1ldGFbJ2NvdmVyX3VybCddKQogICAgICAgICAgICBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPSBtZXRhICkKICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpCiAgICAgICAgICAgIGNvbnRleHRNZW51SXRlbXMgPSBbXQogICAgICAgICAgICBjb250ZXh0TWVudUl0ZW1zLmFwcGVuZCgoJ01vdmllIEluZm9ybWF0aW9uJywgJ1hCTUMuQWN0aW9uKEluZm8pJykpCiAgICAgICAgICAgIGxpei5hZGRDb250ZXh0TWVudUl0ZW1zKGNvbnRleHRNZW51SXRlbXMsIHJlcGxhY2VJdGVtcz1GYWxzZSkKICAgICAgICAgICAgaWYgbm90IG1ldGFbJ2JhY2tkcm9wX3VybCddID09ICcnOiBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIG1ldGFbJ2JhY2tkcm9wX3VybCddKQogICAgICAgICAgICBlbHNlOiBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIGZhbmFydCkKICAgICAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1pc0ZvbGRlcix0b3RhbEl0ZW1zPWl0ZW1jb3VudCkKICAgICAgICAgICAgcmV0dXJuIG9rCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICB1PXN5cy5hcmd2WzBdKyI|KVxuK3AnKS5maW5kYWxsKGxpbmspCgkJCW1hdGNoND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKCQkJZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoOgoJCQkJCWlmIHN0cihnbG9iYWxfc2VhcmNoKS50aXRsZSgpIGluIG5hbWUudGl0bGUoKToKCQkJCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJCQkJYWRkRGlyMihuYW1lLHVybCw5LHRodW1iLGZhbmFydCkKCQkJCQkJZWxzZToKCQkJCQkJCWFkZExpbmsobmFtZSArICIgW0NPTE9SIGJsdWVdSGlmaVsvQ09MT1JdIC0gW0NPTE9SIHB1cnBsZV1NJk1bL0NPTE9SXSIsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgkJCWZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCQkJaWYgc3RyKGdsb2JhbF9zZWFyY2gpLnRpdGxlKCkgaW4gbmFtZS50aXRsZSgpOgoJCQkJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQkJCQlhZGREaXIyKG5hbWUsdXJsLDksaWNvbixmYW5hcnQpCgkJCQkJCWVsc2U6CgkJCQkJCQlhZGRMaW5rKG5hbWUgKyAiIFtDT0xPUiBibHVlXUhpZmlbL0NPTE9SXSAtIFtDT0xPUiBwdXJwbGVdTSZNWy9DT0xPUl0iLHVybCwxMDEsaWNvbixmYW5hcnQpCgkJCWZvciBuYW1lLGRhdGUsdXJsIGluIG1hdGNoMzoKCQkJCQlpZiBzdHIoZ2xvYmFsX3NlYXJjaCkudGl0bGUoKSBpbiBuYW1lLnRpdGxlKCk6CgkJCQkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCQkJCWFkZERpcjIobmFtZSx1cmwsOSxpY29uLGZhbmFydCkKCQkJCQkJZWxzZToKCQkJCQkJCWFkZExpbmsobmFtZSArICIgW0NPTE9SIGJsdWVdSGlmaVsvQ09MT1JdIC0gW0NPTE9SIHB1cnBsZV1NJk1bL0NPTE9SXSIsdXJsLDEwMSxpY29uLGZhbmFydCkKCQkJZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQkJCWlmIHN0cihnbG9iYWxfc2VhcmNoKS50aXRsZSgpIGluIG5hbWUudGl0bGUoKToKCQkJCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJCQkJYWRkRGlyMihuYW1lLHVybCw5LHRodW1iLGZhbmFydCkKCQkJCQkJZWxzZToKCQkJCQkJCWFkZExpbmsobmFtZSArICIgW0NPTE9SIGJsdWVdSGlmaVsvQ09MT1JdIC0gW0NPTE9SIHB1cnBsZV1NJk1bL0NPTE9SXSIsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgkJCWZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoNToKCQkJCQlpZiBzdHIoZ2xvYmFsX3NlYXJjaCkudGl0bGUoKSBpbiBuYW1lLnRpdGxlKCk6CgkJCQkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCQkJCWFkZERpcjIobmFtZSx1cmwsOSx0aHVtYixmYW5hcnQpCgkJCQkJCWVsc2U6CgkJCQkJCQlhZGRMaW5rKG5hbWUgKyAiIFtDT0xPUiBibHVlXUhpZmlbL0NPTE9SXSAtIFtDT0xPUiBwdXJwbGVdTSZNWy9DT0xPUl0iLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQoJCWV4Y2VwdDogcGFzcwoJCXRyeToKCQkJaXRlbV9saW5rcyA9IHJlZ2V4X2dldF9hbGwobGluaywgJzxpdGVtPicsICc8L2l0ZW0|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKCWZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDI6CgkJCWlmICJhcmNoaXZlLm9yZyIgaW4gdXJsOgoJCQkJZ2xvYmFsX2ZldGNoLmFwcGVuZCh1cmwpCglmb3IgbmFtZSx1cmwgaW4gbWF0Y2g6CgkJCWlmICJhcmNoaXZlLm9yZyIgaW4gdXJsOgoJCQkJZ2xvYmFsX2ZldGNoLmFwcGVuZCh1cmwpCmRlZiBTRUFSQ0godXJsLG5hbWUpOgoJQ2hlY2tfaGF0ZXJzKCkKCglzZWFyY2hfZW50ZXJlZCA9JycKCWtleWJvYXJkID0geGJtYy5LZXlib2FyZChzZWFyY2hfZW50ZXJlZCwgJ1NlYXJjaCBNb3ZpZScpCglrZXlib2FyZC5kb01vZGFsKCkKCWlmIGtleWJvYXJkLmlzQ29uZmlybWVkKCk6IHNlYXJjaF9lbnRlcmVkID0ga2V5Ym9hcmQuZ2V0VGV4dCgpCglpZiBsZW4oc2VhcmNoX2VudGVyZWQpPjE6CgkJZ2xvYmFsIGdsb2JhbF9zZWFyY2ggOyBnbG9iYWxfc2VhcmNoID0gc2VhcmNoX2VudGVyZWQKCQlnbG9iYWwgZ2xvYmFsX2ZldGNoIDsgZ2xvYmFsX2ZldGNoID0gW10KCQl0aHJlYWRzX2hvc3RzID0gW3RocmVhZGluZy5UaHJlYWQodGFyZ2V0PWZldGNoX2hvc3RzLCBhcmdzPShob3N0LCkpIGZvciBob3N0IGluIGhvc3RzXQoJCWZvciB0aHJlYWQgaW4gdGhyZWFkc19ob3N0czoKCQkJdGhyZWFkLnN0YXJ0KCkKCQlmb3IgdGhyZWFkIGluIHRocmVhZHNfaG9zdHM6CgkJCXRocmVhZC5qb2luKCkKCQl0aHJlYWRzID0gW3RocmVhZGluZy5UaHJlYWQodGFyZ2V0PWZldGNoX3VybCwgYXJncz0odXJsLGdsb2JhbF9zZWFyY2gpKSBmb3IgdXJsIGluIGdsb2JhbF9mZXRjaF0KCQlmb3IgdGhyZWFkIGluIHRocmVhZHM6CgkJCXRocmVhZC5zdGFydCgpCgkJZm9yIHRocmVhZCBpbiB0aHJlYWRzOgoJCQl0aHJlYWQuam9pbigpCgkJdGhyZWFkcyA9IFt0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1mZXRjaF91cmwsIGFyZ3M9KHVybCxnbG9iYWxfc2VhcmNoKSkgZm9yIHVybCBpbiBnbG9iYWxfZmV0Y2hdCgkJZm9yIHRocmVhZCBpbiB0aHJlYWRzOgoJCQl0aHJlYWQuc3RhcnQoKQoJCWZvciB0aHJlYWQgaW4gdGhyZWFkczoKCQkJdGhyZWFkLmpvaW4oKQoKZGVmIEdldFN1YmxpbmtzKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQpOgogICAgc291cmNlcyA9IFtdCiAgICBzbmFtZSA9IFtdCiAgICBuID0gMAogICAgYWxsX3ZpZGVvcyA9IHJlZ2V4X2dldF9hbGwodXJsLCAnc3VibGluazonLCAnIycpCiAgICBmb3IgYSBpbiBhbGxfdmlkZW9zOgoJCW4gPSBuKzEKCQl2dXJsID0gYS5yZXBsYWNlKCdzdWJsaW5rOicsJycpLnJlcGxhY2UoJyMnLCcnKQoJCXNvdXJjZXMuYXBwZW5kKHZ1cmwpCgkJc25hbWUuYXBwZW5kKG5hbWUrICcgU291cmNlIFsnK3N0cihuKSsnXScpCgkKICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgIGluZGV4ID0gZGlhbG9nLnNlbGVjdCgnU2VsZWN0IGEgc291cmNlOicsIHNuYW1lKQogICAgaWYgaW5kZXg|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQoJCQlmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2htOiByYW5kb21pdGVtLmFwcGVuZChbbmFtZSx0aHVtYix1cmxdKQoJCQlmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaG00OiByYW5kb21pdGVtLmFwcGVuZChbbmFtZSx0aHVtYix1cmxdKQoJCWV4Y2VwdDogcGFzcwoKZGVmIEdFVFJBTkRPTSh1cmwsbmFtZSk6CgkJQ2hlY2tfaGF0ZXJzKCkKCQlnbG9iYWwgcmFuZG9taXRlbSA7IHJhbmRvbWl0ZW0gPSBbXQoJCXJhbmRvbXVybCA9IFsiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9oaWZpbW92aWVzZG9jcy9IZE1vdmllcy54bWwiLCAiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9OYXZpWFBsYXlsaXN0L0hELnhtbCJdIAoJCXRocmVhZHMgPSBbdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZmV0Y2hfcmFuZG9tLCBhcmdzPSh1cmwsKSkgZm9yIHVybCBpbiByYW5kb211cmxdCgkJZm9yIHRocmVhZCBpbiB0aHJlYWRzOgoJCQl0aHJlYWQuc3RhcnQoKQoJCWZvciB0aHJlYWQgaW4gdGhyZWFkczoKCQkJdGhyZWFkLmpvaW4oKQoJCWluZGV4ID0gcmFuZG9tLnJhbmRyYW5nZSgxLCBsZW4ocmFuZG9taXRlbSkpCgkJaW5kZXgyID0gcmFuZG9tLnJhbmRyYW5nZSgxLCBsZW4ocmFuZG9taXRlbSkpCgkJaW5kZXgzID0gcmFuZG9tLnJhbmRyYW5nZSgxLCBsZW4ocmFuZG9taXRlbSkpCgkJbmFtZSA9IHJhbmRvbWl0ZW1baW5kZXhdWzBdCgkJaW1hZ2UgPSByYW5kb21pdGVtW2luZGV4XVsxXQoJCXVybCAgID0gcmFuZG9taXRlbVtpbmRleF1bMl0KCQluYW1lMiA9IHJhbmRvbWl0ZW1baW5kZXgyXVswXQoJCWltYWdlMiA9IHJhbmRvbWl0ZW1baW5kZXgyXVsxXQoJCXVybDIgICA9IHJhbmRvbWl0ZW1baW5kZXgyXVsyXQoJCW5hbWUzID0gcmFuZG9taXRlbVtpbmRleDNdWzBdCgkJaW1hZ2UzID0gcmFuZG9taXRlbVtpbmRleDNdWzFdCgkJdXJsMyAgPSByYW5kb21pdGVtW2luZGV4M11bMl0KCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpbWFnZSxmYW5hcnQpCgkJYWRkTGluayhuYW1lMix1cmwyLDEwMSxpbWFnZTIsZmFuYXJ0KQoJCWFkZExpbmsobmFtZTMsdXJsMywxMDEsaW1hZ2UzLGZhbmFydCkKCQkJCQkKIyMjIyMjIEpPSE5OWSBMSVNUUyAjIyMjIyBOQU1FUyBTRVQgVE8gVVJMIEZPUiBSRVNPTFZFUlMgQ0hFQ0sKZGVmIEdFVEpMSVNUKHVybCxuYW1lKToKCUNoZWNrX2hhdGVycygpCgoJdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCglleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQoJYWxsX2xpbmtzID0gcmVnZXhfZ2V0X2FsbChsaW5rLCAnPGNoYW5uZWw|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKCiAgICAgICAgZm9yIG5hbWUsdXJsLHRodW1iIGluIG1hdGNoNToKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCwxMCx0aHVtYixmYW5hcnRoaWZpKQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsdGh1bWIpCgogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDI6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsMTAsdGh1bWIsZmFuYXJ0aGlmaSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLHRodW1iKQogICAgICAgIGZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoNDoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCwxMCx0aHVtYixmYW5hcnRoaWZpKQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0aGlmaSkKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2g6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsMTAsaWNvbjMsZmFuYXJ0aGlmaSkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24zLGZhbmFydGhpZmkpCiAgICAgICAgZm9yIG5hbWUsZGF0ZSx1cmwgaW4gbWF0Y2gzOgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDEwLGljb24zLGZhbmFydGhpZmkpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uMyxmYW5hcnRoaWZpKQpkZWYgR0VUTElOS1NORVcodXJsLG5hbWUsaWNvbmltYWdlKToKCQludW1UcmllcyA9IDcKCQlob3N0ID0gMAoJCXVybG9yaWcgPSB1cmwKCQlvcmlnaW5hbG5hbWUgPSBuYW1lCgkJdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCgkJZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKCQltYXRjaGxpbms9cmUuY29tcGlsZSgnZGF0YS1saW5rPSIoLis|JywnJykKICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbbGVuKHBhcmFtcyktMV09PScvJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQogICAgICAgICAgICAgICAgcGFpcnNvZnBhcmFtcz1jbGVhbmVkcGFyYW1zLnNwbGl0KCcmJykKICAgICAgICAgICAgICAgIHBhcmFtPXt9CiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOgogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz17fQogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz1wYWlyc29mcGFyYW1zW2ldLnNwbGl0KCc9JykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtW3NwbGl0cGFyYW1zWzBdXT1zcGxpdHBhcmFtc1sxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHBhcmFtCmRlZiBHRVRGRUFUVVJFRCh1cmwsbmFtZSk6CiAgICAgICAgQ2hlY2tfaGF0ZXJzKCkKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXInKS5maW5kYWxsKGxpbmspCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoMjogYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQogICAgICAgIHVybDIgPSAiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9OYXZpWFBsYXlsaXN0L0hELnhtbCIKICAgICAgICB0cnk6bGluazIgPSBvcGVuX3VybCh1cmwyKQogICAgICAgIGV4Y2VwdDpsaW5rMiA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwyLCBtb2JpbGU9VHJ1ZSkKICAgICAgICBtYXRjaG09cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2g6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsOSx0aHVtYixmYW5hcnQpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYix0aHVtYikKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2gyOgoJCQlpZiAiYXJjaGl2ZSIgaW4gc3RyKHVybCk6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDksaWNvbixmYW5hcnQpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCWlmICJhcmNoaXZlIiBpbiBzdHIodXJsKToKCQkJCWFkZERpcjIobmFtZSx1cmwsOSxpY29uLGZhbmFydCkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24sZmFuYXJ0KQogICAgICAgIGZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoNDoKCQkJaWYgImFyY2hpdmUiIGluIHN0cih1cmwpOgoJCQkJYWRkRGlyMihuYW1lLHVybCw5LHRodW1iLGZhbmFydCkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLGZhbmFydCkKZGVmIEdFVEVQSVNPREVTKHVybCxuYW1lKToKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDoKICAgICAgICAgICAgICAgIG5hbWU9cmUuc3ViKHInXC4nLHInICcsIG5hbWUpCiAgICAgICAgICAgICAgICBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYix0aHVtYikKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2gyOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsaWNvbixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsZGF0ZSx1cmwgaW4gbWF0Y2gzOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsaWNvbixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQkJCmRlZiBHRVRNTSh1cmwsbmFtZSk6CiAgICAgICAgQ2hlY2tfaGF0ZXJzKCkKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIG1hdGNoX3JhbmRvbT1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbityYW5kb20nKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2g9cmUuY29tcGlsZSgnbmFtZT0oLis|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpCiAgICAgICAgICAgIG9rPVRydWUKICAgICAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUgfSApCiAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgnZmFuYXJ0X2ltYWdlJywgZmFuYXJ0KQogICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoIklzUGxheWFibGUiLCJ0cnVlIikKICAgICAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1pc0ZvbGRlcikKICAgICAgICAgICAgcmV0dXJuIG9rCmRlZiByZWdleF9nZXRfYWxsKHRleHQsIHN0YXJ0X3dpdGgsIGVuZF93aXRoKToKICAgIHIgPSByZS5maW5kYWxsKCIoP2kpKCIgKyBzdGFydF93aXRoICsgIltcU1xzXSs|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpKyImZGVzY3JpcHRpb249Iit1cmxsaWIucXVvdGVfcGx1cyhkZXNjcmlwdGlvbikKICAgICAgICBvaz1UcnVlCiAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogbmFtZSwgJ3Bsb3QnOiBkZXNjcmlwdGlvbiB9ICkKICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIGZhbmFydCkKICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpCiAgICAgICAgcmV0dXJuIG9rCmRlZiBhZGRMaW5rKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGRlc2NyaXB0aW9uPScnKToKICAgICAgICB1PXN5cy5hcmd2WzBdKyI|KVxuK3AnKS5maW5kYWxsKGxpbmsyKQogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaG06CiAgICAgICAgICAgICAgICBuYW1lPXJlLnN1YihyJ1wuJyxyJyAnLCBuYW1lKQogICAgICAgICAgICAgICAgYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsdGh1bWIpCiAgICAgICAgZm9yIG5hbWUsdXJsIGluIG1hdGNobTI6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaG0zOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsaWNvbixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2htNDoKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLGZhbmFydCkJCQpkZWYgZmV0Y2hfcmFuZG9tKHVybCk6CgkJbGluayA9IG9wZW5fdXJsKHVybCkKCQl0cnk6CgkJCW1hdGNobT1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQoJCQltYXRjaG00PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXHMqcGxheWVyPScpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaDoKCQkJCWFkZERpcjIobmFtZSx1cmwsNSx0aHVtYixmYW5hcnQpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoMjoKCQkJCWFkZERpcjIobmFtZSx1cmwsNSx0aHVtYixmYW5hcnQpCmRlZiBHRVRfU0VBUkNIX0ZPTERFUlModXJsLG5hbWUpOgogICAgICAgIENoZWNrX2hhdGVycygpCiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDM9cmUuY29tcGlsZSgnbmFtZT0oLis|aW1wb3J0IHVybGxpYix1cmxsaWIyLHJlLHhibWNwbHVnaW4seGJtY2d1aSx1cmxyZXNvbHZlcixzeXMseGJtYyx4Ym1jYWRkb24sb3MsdXJscGFyc2UscmFuZG9tCmZyb20gdDBtbTAuY29tbW9uLmFkZG9uIGltcG9ydCBBZGRvbgpmcm9tIG1ldGFoYW5kbGVyIGltcG9ydCBtZXRhaGFuZGxlcnMKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2FjaGUKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2xpZW50CmZyb20gcmVzb3VyY2VzLmxpYi5saWJyYXJpZXMgaW1wb3J0IGNsb3VkZmxhcmUKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2FydG9vbnMKaW1wb3J0IHRocmVhZGluZwpob3N0cyA9IFsiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9oaWZpbW92aWVzZG9jcy9tYWluX3BhZ2UueG1sIiwgImh0dHBzOi8vYXJjaGl2ZS5vcmcvZG93bmxvYWQvTmF2aVhQbGF5bGlzdC9wbGF5bGlzdF9tYXJpLnhtbCIsICJodHRwOi8vcGFzdGViaW4uY29tL3Jhdy5waHA|JykuZmluZGFsbChsaW5rKQoJCW1hdGNobGluazI9cmUuY29tcGlsZSgiPGEgc3R5bGU9Jy4rPycgaHJlZj0nKC4rPyknIHRhcmdldD0nX2JsYW5rJyIpLmZpbmRhbGwobGluaykKCQlmb3IgdXJsIGluIG1hdGNobGluazoKCQkJCQkJaG9zdD11cmwuc3BsaXQoJy8nKVsyXS5yZXBsYWNlKCd3d3cuJywnJykuY2FwaXRhbGl6ZSgpCgkJCQkJCWFkZExpbmsodXJsLHVybCwxMDEsaWNvbiwnJykKZGVmIEdFVExJVkUodXJsLG5hbWUpOgogICAgICAgIHRyeTpsaW5rID0gb3Blbl91cmwodXJsKQogICAgICAgIGV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCiAgICAgICAKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXHMqcGxheWVyPScpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|JywgJzwvdGh1bWJuYWlsPicpCgkJCQlpZiBwbGF5dXJsOgoJCQkJCWlmICJzdWJsaW5rIiBpbiBwbGF5dXJsOgoJCQkJCQlpZiBzdHIoZ2xvYmFsX3NlYXJjaCkudGl0bGUoKSBpbiBuYW1lLnRpdGxlKCk6YWRkRGlyMihuYW1lKyIgIFtDT0xPUiB5ZWxsb3ddTWlkbmlnaHQgU29jaWV0eVsvQ09MT1JdIixwbGF5dXJsLDMxLHRodW1iLGZhbmFydCkKCQkJCQllbHNlOgoJCQkJCQlpZiBzdHIoZ2xvYmFsX3NlYXJjaCkudGl0bGUoKSBpbiBuYW1lLnRpdGxlKCk6YWRkTGluayhuYW1lKyIgIFtDT0xPUiB5ZWxsb3ddTWlkbmlnaHQgU29jaWV0eVsvQ09MT1JdIixwbGF5dXJsLDEwMSx0aHVtYixmYW5hcnQpCQkJCQoJCWV4Y2VwdDogcGFzcwoKCmRlZiBmZXRjaF9ob3N0cyhob3N0KToKCWxpbmsgPSBvcGVuX3VybChob3N0KQoJYWxsX2xpbmtzID0gcmVnZXhfZ2V0X2FsbChsaW5rLCAnPGNoYW5uZWw|KVxzKnBsYXllcj0nKS5maW5kYWxsKGxpbmspCiAgICAgICAgZm9yIG5hbWUsdXJsIGluIG1hdGNoMjoKCQkJCWFkZERpcjIobmFtZSx1cmwsMTAxLGljb24sJycpCmRlZiBHRVRTSE9XUyh1cmwsbmFtZSk6CiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXHMqcGxheWVyPScpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmICJwYXN0ZWJpbiIgaW4gdXJsOgoJCQlnbG9iYWxfZmV0Y2guYXBwZW5kKHVybCkKCQllbGlmICJwYXN0ZWJpbiIgaW4gZGlyOgoJCQlnbG9iYWxfZmV0Y2guYXBwZW5kKGRpcikKCgltYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQoJbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|dj0iICsgdXJsCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmIHVybDoKCQkJaWYgInN1YmxpbmsiIGluIHVybDoKCQkJCWFkZERpcjIobmFtZSx1cmwsMzEsdGh1bWIsZmFuYXJ0KQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQoKCmRlZiBmZXRjaF91cmwodXJsLGdsb2JhbF9zZWFyY2gpOgoJCWxpbmsgPSBvcGVuX3VybCh1cmwpCgkJdHJ5OgoJCQltYXRjaDU9cmUuY29tcGlsZSgnbmFtZT0oLis|JykKCQlpZiB1cmw6CgkJCWlmICJzdWJsaW5rIiBpbiB1cmw6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDMxLHRodW1iLGZhbmFydCkKCQkJZWxzZToKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLGZhbmFydCkKCXlvdXR1YmVfbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8aXRlbT4nLCAnPC9pdGVtPicpCglmb3IgbGlzdCBpbiB5b3V0dWJlX2xpbmtzOgoJCW5hbWUgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGl0bGU|aSkmI1x3KzsiLCBmaXh1cCwgdGV4dC5kZWNvZGUoJ0lTTy04ODU5LTEnKS5lbmNvZGUoJ3V0Zi04JykpCgpkZWYgZ2V0X3BhcmFtcygpOgogICAgICAgIHBhcmFtPVtdCiAgICAgICAgcGFyYW1zdHJpbmc9c3lzLmFyZ3ZbMl0KICAgICAgICBpZiBsZW4ocGFyYW1zdHJpbmcpPj0yOgogICAgICAgICAgICAgICAgcGFyYW1zPXN5cy5hcmd2WzJdCiAgICAgICAgICAgICAgICBjbGVhbmVkcGFyYW1zPXBhcmFtcy5yZXBsYWNlKCc|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmICJpZ25vcmUiIGluIHVybDoKCQkJYWRkRGlyMihuYW1lLGRpciwzMCx0aHVtYixmYW5hcnQpCgkJCglpdGVtX2xpbmtzID0gcmVnZXhfZ2V0X2FsbChsaW5rLCAnPGl0ZW0|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgbWF0Y2htMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgbWF0Y2htMz1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqZGF0ZT0oLis|JywgJzwvY2hhbm5lbD4nKQoJZm9yIGxpc3QgaW4gYWxsX2xpbmtzOgoJCWRpciA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxleHRlcm5hbGxpbms|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2g1PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylccyp0aHVtYj0oLis|IiArIGVuZF93aXRoICsgIikiLCB0ZXh0KQogICAgcmV0dXJuIHIJCQkJCgpkZWYgcmVnZXhfZnJvbV90byh0ZXh0LCBmcm9tX3N0cmluZywgdG9fc3RyaW5nLCBleGNsdWRpbmc9VHJ1ZSk6CiAgICBpZiBleGNsdWRpbmc6CgkgICB0cnk6IHIgPSByZS5zZWFyY2goIig|KVxzKnRodW1iPSguKz8pXHMqcGxheWVyJykuZmluZGFsbChsaW5rKQoJCQltYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQoJCQltYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gzPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDQ9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMz1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqZGF0ZT0oLis|JywgJzwvZXh0ZXJuYWxsaW5rPicpCgkJbmFtZSA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxuYW1lPicsICc8L25hbWU|KVxzKlVSTD0oLis|JywgJzwvaXRlbT4nKQoJZm9yIGxpc3QgaW4gaXRlbV9saW5rczoKCQluYW1lID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPHRpdGxlPicsICc8L3RpdGxlPicpCgkJdXJsID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPGxpbms|JykKCQkJCXBsYXl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJCQl0aHVtYiA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aHVtYm5haWw|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKnRodW1iPSguKz8pXHMqZGF0ZT0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2g0PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JywgJzwvbGluaz4nKQoJCXRodW1iID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPHRodW1ibmFpbD4nLCAnPC90aHVtYm5haWw|JykKCQkJZm9yIGxpc3QgaW4gaXRlbV9saW5rczoKCQkJCW5hbWUgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGl0bGU|KVxuK3AnKS5maW5kYWxsKGxpbmspCgkJCW1hdGNoMz1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqZGF0ZT0oLis|KVxuK3AnKS5maW5kYWxsKGxpbmsyKQogICAgICAgIG1hdGNobTQ9cmUuY29tcGlsZSgnbmFtZT0oLis|JykKCQl1cmwgPSAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dXR1YmU|aSkiICsgZnJvbV9zdHJpbmcgKyAiKFtcU1xzXSs|JywgJzwvdGl0bGU|JywgJzwvdXR1YmU|base64|b64decode|import|exec|KSI".split("|")))